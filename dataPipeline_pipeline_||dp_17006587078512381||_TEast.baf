{"logType":"","components":[{"containerImageVersion":"w8.5.2","componentDesc":"","gracePeriod":"60","componentId":"comp_16449201586344539","displayName":"tvo2_backfill_input","UiId":"73f8-cf2a-473a-bf30-0d0b","containerImageName":"580240783317.dkr.ecr.us-west-2.amazonaws.com/dslab_model_runner","onFailure":"","isScheduled":false,"inEvent":"TVO2_backfill_event_1_1700473690169_4980","action":"stop","gUid":"1700473896753_3666","componentInstanceId":"comp1700477948777_inst_6559","invocationMethodType":"batch","componentMetaData":{"dsLabScriptId":"5308500","dsLabFunctionName":"start_func","dsLabProjectId":"4751365","dsLabExternalLibrary":"psycopg2==2.9.3,boto3==1.21.5,psycopg2==2.9.3","dsLabExecutionType":"dsLabScriptRunner","dsLabFunInputType":"List","dsLabScript":"from datetime import datetime, timedelta\nimport json\nimport logging\nlogging.basicConfig()\nlogger = logging.getLogger('TVO_INPUT')\nlogger.setLevel(logging.INFO)\n\nimport boto3\nimport pandas as pd\nimport psycopg2\nfrom io import BytesIO\nimport base64\n\ndef get_redshift_secret():\n    global AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, REGION_NAME, SECRET_NAME\n    # connects to AWS secrets manager to get credentials\n    session = boto3.session.Session()\n    \n    client = session.client(\n        service_name='secretsmanager', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n\n    try:\n        get_secret_value_response = client.get_secret_value(SecretId=SECRET_NAME)\n    except Exception as e:\n        logger.error(\"ERROR in getting redshift secrets\")\n        raise\n    else:\n        if 'SecretString' in get_secret_value_response:\n            secret = get_secret_value_response['SecretString']\n        else:\n            decoded_binary_secret = base64.b64decode(\n                get_secret_value_response['SecretBinary'])\n    return json.loads(secret)\n\ndef get_redshift_connection():\n    # creates data base connection and passes it back to caller\n    try:\n        secrets = get_redshift_secret()\n        conn = psycopg2.connect(dbname=secrets['DATABASE'],\n                                host=secrets['HOST'],\n                                port=secrets['PORT'],\n                                user=secrets['USER'],\n                                password=secrets['PASSWORD'])\n        return conn\n\n    except Exception as e:\n        logger.error(f'Error getting redshift connection details: Exception: {str(e)}')\n        raise\n        \ndef run_redshift_query(redshift_query):\n    conn = get_redshift_connection()\n    df = pd.read_sql_query(redshift_query, con=conn)\n    return df\n\ndef run_athena_query(query):\n    global REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, ATHENA_DATABASE, ATHENA_TABLE, ATHENA_STATUS_OUTPUT_LOCATION, QUERY_BUCKET\n    \n    ATHENA_CLIENT = boto3.client('athena', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n    S3 = boto3.client('s3', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n    logger.info(f'Starting Athena query execution')\n    logger.info(f'Athena query:\\n{query}')\n    response = ATHENA_CLIENT.start_query_execution(\n        QueryString=query,\n        QueryExecutionContext={'Database': ATHENA_DATABASE},\n        ResultConfiguration={'OutputLocation': ATHENA_STATUS_OUTPUT_LOCATION},\n        WorkGroup='juice_data'\n    )\n    \n    # Get the query execution ID\n    query_execution_id = response['QueryExecutionId']\n\n    # Wait for the query to complete\n    while True:\n        query_status = ATHENA_CLIENT.get_query_execution(QueryExecutionId=query_execution_id)\n        status = query_status['QueryExecution']['Status']['State']\n\n        if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:\n            break\n\n    # Retrieve and return the query results if the query succeeded\n    if status == 'SUCCEEDED':\n        s3_response_object = S3.get_object(Bucket=QUERY_BUCKET, Key=f\"{ATHENA_STATUS_OUTPUT_LOCATION.split('/')[-2]}/{query_execution_id}.csv\")\n        object_content = s3_response_object['Body'].read()\n        results = pd.read_csv(BytesIO(object_content))\n        logger.info(f'Athena query ran successfully')\n        return results\n    elif status == 'FAILED':\n        raise Exception('Query from Athena failed')\n\ndef client_modification(row):\n    if row.lower().strip() == 'bbb':\n        return 'overstock'\n    elif row.lower() == 'rexmd' or row.lower() == 'singlecare':\n        return 'rxsense'\n    else:\n        return row.lower()\n        \ndef prepare_data(data, lookback_days, opt_penalty_station,\n                   opt_penalty_daypart, opt_penalty_bucket, opt_penalty_variance, opt_max_seconds, branch):\n    global ATHENA_DATABASE, ATHENA_TABLE\n    \n    input_df = pd.DataFrame(columns=['kpi_index', 'lookbefore_mins', 'lookafter_mins', 'include_freespots',\n       'include_impressions', 'opt_penalty_station', 'opt_penalty_daypart',\n       'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds',\n       'branch', 'start_date', 'end_date', 'clientkey'])\n    \n    redshift_query = \"\"\"\n        select distinct c.clientkey_map, k.tvo_kpi_index, c.tvo_pre_window_minutes, c.tvo_post_window_minutes, c.tvo_include_freespots, c.tvo_include_impressions, c.dataset_start_date, c.dataset_end_date\n        from portal_global_settings.client_mappings c, portal_global_settings.kpi_mappings k\n        where c.clientkey_map = k.clientkey_map\n        order by clientkey_map, tvo_kpi_index\n        \"\"\"\n    \n    for end_date_string in data[\"end_dates\"]:\n        \n        # Getting redshift results\n        start_date = \"default\"\n        end_dt = datetime(year=int(end_date_string.split(\"-\")[0]), month=int(end_date_string.split(\"-\")[1]), day=int(end_date_string.split(\"-\")[2]), hour=0)\n        prev_day = end_dt - timedelta(1)\n        end_date = f'{prev_day.year}-{str(\"{:02d}\".format(prev_day.month))}-{str(\"{:02d}\".format(prev_day.day))}'\n        redshift_df = run_redshift_query(redshift_query)\n        redshift_df = redshift_df.drop(columns=['dataset_start_date','dataset_end_date'])\n        redshift_df[['opt_penalty_station', 'opt_penalty_daypart', 'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds', 'branch', 'start_date', 'end_date']] = pd.DataFrame([[opt_penalty_station, opt_penalty_daypart, opt_penalty_bucket, opt_penalty_variance, opt_max_seconds, branch, start_date, end_date]], index=redshift_df.index)\n        redshift_df = redshift_df.rename(columns = {'clientkey_map':'clientkey',\n                                                 'tvo_kpi_index':'kpi_index',\n                                                'tvo_pre_window_minutes':'lookbefore_mins',\n                                                'tvo_post_window_minutes':'lookafter_mins',\n                                                'tvo_include_freespots':'include_freespots',\n                                                'tvo_include_impressions':'include_impressions'\n                                                })\n\n        \n        # Querying athena to get list of clients active in the past week\n        dt = (datetime.strptime(end_date_string, '%Y-%m-%d'))\n        end_check_date = dt.strftime(\"%Y-%m-%d\")\n        dt_7 = dt - timedelta(days=lookback_days)\n        start_check_date = dt_7.strftime(\"%Y-%m-%d\")\n\n        athena_query = f\"\"\"\n        select advertiser, count(*) as row_count from \n        (select distinct * from {ATHENA_DATABASE}.{ATHENA_TABLE})\n        where cast(broadcast_date as date) between cast('{str(start_check_date)}' as date) and cast('{str(end_check_date)}' as date)\n        group by advertiser\n        \"\"\"\n        athena_df = run_athena_query(athena_query)\n        active_client_list = athena_df[athena_df['row_count']>0]['advertiser'].to_list()\n        active_client_list = [i.lower().strip() for i in active_client_list]\n        active_list_df = pd.DataFrame({'client_orig':active_client_list})\n        active_list_df['client_mod'] = active_list_df['client_orig'].apply(client_modification)\n        \n        # Merging client list with configurations from redshift\n        final_df = redshift_df.set_index('clientkey').merge(active_list_df.set_index('client_mod'), left_on='clientkey', right_on='client_mod')\n        final_df = final_df.rename(columns={'client_orig':'clientkey'})\n        final_df = final_df.dropna()\n        input_df = pd.concat([input_df,final_df])\n    input_df = input_df.sort_values(['end_date','clientkey','kpi_index'])\n    return input_df\n\ndef start_func(data, secret_name, region_name, athena_database, aws_access_key_id,\n                aws_secret_access_key, athena_status_output_location, query_bucket,\n                  athena_table, branch, lookback_days=7, opt_penalty_station=1,\n                   opt_penalty_daypart=1, opt_penalty_bucket=1, opt_penalty_variance=1, opt_max_seconds=60):\n     \n    global AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, REGION_NAME, SECRET_NAME, conn, cursor, ATHENA_DATABASE, ATHENA_TABLE, ATHENA_STATUS_OUTPUT_LOCATION, QUERY_BUCKET\n    AWS_ACCESS_KEY_ID = aws_access_key_id\n    AWS_SECRET_ACCESS_KEY = aws_secret_access_key\n    REGION_NAME = region_name\n    SECRET_NAME = secret_name\n    ATHENA_DATABASE = athena_database\n    ATHENA_TABLE = athena_table\n    ATHENA_STATUS_OUTPUT_LOCATION = athena_status_output_location\n    QUERY_BUCKET = query_bucket\n    \n    result_df = pd.DataFrame(columns=['kpi_index', 'lookbefore_mins', 'lookafter_mins', 'include_freespots',\n       'include_impressions', 'opt_penalty_station', 'opt_penalty_daypart',\n       'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds',\n       'branch', 'start_date', 'end_date', 'clientkey'])\n    \n    results = prepare_data(data[0], int(lookback_days), int(opt_penalty_station),\n               int(opt_penalty_daypart), int(opt_penalty_bucket), int(opt_penalty_variance), int(opt_max_seconds), branch)\n        \n    return results","dsLabInputData":"[{\"key\":\"secret_name\",\"value\":\"@ENV.REDSHIFT_MTA_SECRET_NAME\"},{\"key\":\"region_name\",\"value\":\"@ENV.REGION_NAME\"},{\"key\":\"athena_database\",\"value\":\"@ENV.ATHENA_DATABASE\"},{\"key\":\"aws_access_key_id\",\"value\":\"@ENV.AWS_ACCESS_KEY_ID_BDB\"},{\"key\":\"aws_secret_access_key\",\"value\":\"@ENV.AWS_SECRET_KEY_BDB\"},{\"key\":\"athena_status_output_location\",\"value\":\"@ENV.QUERY_RESULTS\"},{\"key\":\"query_bucket\",\"value\":\"@ENV.PROD_BUCKET\"},{\"key\":\"athena_table\",\"value\":\"media_ocean_data\"},{\"key\":\"branch\",\"value\":\"master\"}]"},"alertAction":"","isDeploy":true,"isDynamicAllocationEnabled":false,"batchWindow":"","cronExpression":"","deploymentType":"docker","preConditionCheck":"None","imagePullSecretRefs":[],"outEvent":["TVO2_backfill_event_2_1700473917659_1717"],"onSuccess":""},{"containerImageVersion":"w8.5.2","invocationMethodType":"realtime","componentDesc":"","componentMetaData":{"dsLabScriptId":"5308499","dsLabFunctionName":"tvo_driver","dsLabProjectId":"4751365","dsLabExternalLibrary":"skranger==0.8.0,boto3==1.21.5,holidays==0.13,impyute==0.0.8,kendall_w==1.0.0,psycopg2==2.9.3,PuLP==2.6.0,scikit-learn==1.2.2,scipy==1.8.0,skranger==0.8.0","dsLabExecutionType":"dsLabScriptRunner","dsLabFunInputType":"List","dsLabScript":"import config\nimport main\nfrom time import perf_counter\nimport logging\nimport boto3\n\n\n\ndef get_athena_connection(REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY):\n    athena_client = boto3.client(\n        'athena', \n        region_name=REGION_NAME, \n        aws_access_key_id=AWS_ACCESS_KEY_ID, \n        aws_secret_access_key=AWS_SECRET_ACCESS_KEY\n    )\n    return athena_client\n\ndef run_athena_query(query, ATHENA_DATABASE, ATHENA_STATUS_OUTPUT_LOCATION,\n                    REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY):\n    \n    ATHENA_CLIENT = get_athena_connection(REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)\n        \n    logging.info(f'Starting Athena query execution')\n    logging.info(f'Athena query:\\n{query}')\n    response = ATHENA_CLIENT.start_query_execution(\n        QueryString=query,\n        QueryExecutionContext={'Database': ATHENA_DATABASE},\n        ResultConfiguration={'OutputLocation': ATHENA_STATUS_OUTPUT_LOCATION},\n        WorkGroup='juice_data'\n    )\n    \n    # Get the query execution ID\n    query_execution_id = response['QueryExecutionId']\n\n    # Wait for the query to complete\n    while True:\n        query_status = ATHENA_CLIENT.get_query_execution(QueryExecutionId=query_execution_id)\n        status = query_status['QueryExecution']['Status']['State']\n        if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:\n            break\n\n    # Retrieve and return the query results if the query succeeded\n    if status == 'SUCCEEDED':\n        logging.info(f'Athena query ran successfully')\n    elif status == 'FAILED':\n        raise Exception('Query from Athena failed') \n\n\ndef tvo_driver(input_data, s3_target_bucket_performance, s3_target_path_performance, s3_target_path_performance_tvo,\n                secret_name, region_name, athena_database, aws_access_key_id,\n                aws_secret_access_key, athena_status_output_location, query_bucket):\n    \n    logging.info(f'TVO 2 process started')\n    input_data = input_data[0]\n    start_time = perf_counter()\n        \n    # Getting config variables\n    main.init_config(s3_target_bucket_performance, s3_target_path_performance, s3_target_path_performance_tvo,\n                secret_name, region_name, athena_database, aws_access_key_id,\n                aws_secret_access_key, athena_status_output_location, query_bucket)\n    \n    # TVO2 process\n    results = main._main(input_data) \n    logging.info(f'TVO 2 process finished in {round(perf_counter() - start_time, 3)} seconds')\n    results[0]['process_time_minutes'] = round(round(perf_counter() - start_time, 3)/60,3)\n    \n    # Doing MSCK repair\n    table_name = f\"{athena_database}.tvo_2_0\"\n    query = f\"MSCK REPAIR TABLE {table_name}\"\n    run_athena_query(query, athena_database, athena_status_output_location, region_name,\n                    aws_access_key_id, aws_secret_access_key)\n    return results","dsLabInputData":"[{\"key\":\"s3_target_bucket_performance\",\"value\":\"@ENV.ATTRIBUTION_BUCKET_TVO\"},{\"key\":\"s3_target_path_performance\",\"value\":\"tvo2\"},{\"key\":\"secret_name\",\"value\":\"@ENV.REDSHIFT_MTA_SECRET_NAME\"},{\"key\":\"region_name\",\"value\":\"@ENV.REGION_NAME\"},{\"key\":\"athena_database\",\"value\":\"@ENV.ATHENA_DATABASE\"},{\"key\":\"aws_access_key_id\",\"value\":\"@ENV.AWS_ACCESS_KEY_ID_BDB\"},{\"key\":\"aws_secret_access_key\",\"value\":\"@ENV.AWS_SECRET_KEY_BDB\"},{\"key\":\"athena_status_output_location\",\"value\":\"@ENV.QUERY_RESULTS\"},{\"key\":\"query_bucket\",\"value\":\"@ENV.PROD_BUCKET\"},{\"key\":\"s3_target_path_performance_tvo\",\"value\":\"tvo2.1\"}]"},"alertAction":"","componentId":"comp_16449201586344539","isDeploy":true,"isDynamicAllocationEnabled":false,"batchWindow":"1","displayName":"tvo2_backfill","UiId":"0786-f76e-4c9e-a7b7-1db8","containerImageName":"580240783317.dkr.ecr.us-west-2.amazonaws.com/dslab_model_runner","onFailure":"","isScheduled":false,"cronExpression":"","deploymentType":"docker","inEvent":"TVO2_backfill_event_3_1700474019724_9806","preConditionCheck":"None","imagePullSecretRefs":[],"action":"stop","gUid":"1700474350629_4451","componentInstanceId":"comp1700477854606_inst_1830","outEvent":["TVO2_backfill_event_5_1700645265885_9735"],"onSuccess":""},{"containerImageVersion":"8.5.0","componentDesc":"","gracePeriod":"60","componentId":"comp_15464936690991417","displayName":"load_balancer","UiId":"2d8f-21e7-4c78-8f76-c047","containerImageName":"580240783317.dkr.ecr.us-west-2.amazonaws.com/custom_python_script","onFailure":"","isScheduled":false,"inEvent":"TVO2_backfill_event_2_1700473917659_1717","action":"stop","gUid":"1700473989110_9251","componentInstanceId":"comp1700473989110_inst_8626","invocationMethodType":"batch","componentMetaData":{"inputData":"[]","funInputType":"DataFrame","startFunName":"func","componentName":"tvo2_load_balancer","libraryList":[],"script":"def func(df):\n    return df"},"alertAction":"","isDeploy":true,"isDynamicAllocationEnabled":false,"batchWindow":"1","cronExpression":"","deploymentType":"docker","preConditionCheck":"None","imagePullSecretRefs":[],"outEvent":["TVO2_backfill_event_3_1700474019724_9806"],"onSuccess":""},{"containerImageVersion":"8.5.0","invocationMethodType":"realtime","componentDesc":"","componentMetaData":{"ingestionType":"apiIngestion","ingestionId":"176ec64c-5a2d-4f00-9041-d8e1b061d162","ingestionSecret":"ET4xx3YQp62UCltw7QqnTczcIbnCOkVc1kt6JRgs6Mb3uLKTYg9EpGUtIjEbi"},"alertAction":"","componentId":"comp_16188590124008978","isDeploy":true,"isDynamicAllocationEnabled":false,"batchWindow":"","displayName":"API Ingestion","UiId":"b9fc-ed9b-476a-afb4-a011","containerImageName":"580240783317.dkr.ecr.us-west-2.amazonaws.com/apidatareader","onFailure":"","isScheduled":false,"cronExpression":"","deploymentType":"docker","inEvent":"","preConditionCheck":"None","imagePullSecretRefs":[],"action":"stop","gUid":"1700473681691_1895","componentInstanceId":"comp1700473681691_inst_7360","outEvent":["TVO2_backfill_event_1_1700473690169_4980"],"onSuccess":""}],"enableLogs":false,"dpDetails":[],"isActive":true,"createdOn":"2023-11-20T09:47:35.769Z[Etc/UTC]","pipelineId":"dp_17004736553674710","pipelineDefinition":{"name":"TVO2_backfill","desc":""},"apiVersion":"v1","isRunning":false,"lastActivatedOn":"2023-11-20T11:17:49.230Z[Etc/UTC]","prmDetails":[],"resourceLimit":"low","compConf":[{"configuration":{"confId":122334,"confName":"resource_new","confDetails":{"high":{"realtime":{"nonspark":{"request":{"memory":"2048Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"4048Mi","cpu":"2500m","maxInstances":1}},"spark":{"driver":{"corelimit":"1024m","core":1,"memory":"2048m"},"executor":{"core":1,"memory":"2048m","instances":3,"maxInstances":3}}},"batch":{"nonspark":{"request":{"memory":"4096Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"6048Mi","cpu":"2000m","maxInstances":1}},"spark":{"driver":{"corelimit":"4096m","core":1,"memory":"2048m"},"executor":{"core":1,"memory":"4096m","instances":2,"maxInstances":2}}}},"low":{"realtime":{"nonspark":{"request":{"memory":"250Mi","instances":1,"cpu":"100m"},"limit":{"memory":"500Mi","cpu":"100m","maxInstances":1}},"spark":{"driver":{"corelimit":"1024m","core":0.5,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}},"batch":{"nonspark":{"request":{"memory":"250Mi","instances":1,"cpu":"100m"},"limit":{"memory":"500Mi","cpu":"100m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.5,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}}},"medium":{"realtime":{"nonspark":{"request":{"memory":"1024Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"2048Mi","cpu":"1000m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.1,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}},"batch":{"nonspark":{"request":{"memory":"1024Mi","instances":1,"cpu":"100m"},"limit":{"memory":"2048Mi","cpu":"250m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.1,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}}}},"confType":"resource_new","isActive":true},"componentInstId":"comp1700473681691_inst_7360","uiId":"b9fc-ed9b-476a-afb4-a011","componentName":"API Ingestion","configurationType":"low","pipelineId":"dp_17004736553674710"},{"configuration":{"confId":122334,"confName":"resource_new","confDetails":{"high":{"realtime":{"nonspark":{"request":{"memory":"2048Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"4048Mi","cpu":"2500m","maxInstances":1}},"spark":{"driver":{"corelimit":"1024m","core":1,"memory":"2048m"},"executor":{"core":1,"memory":"2048m","instances":3,"maxInstances":3}}},"batch":{"nonspark":{"request":{"memory":"4096Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"6048Mi","cpu":"2000m","maxInstances":1}},"spark":{"driver":{"corelimit":"4096m","core":1,"memory":"2048m"},"executor":{"core":1,"memory":"4096m","instances":2,"maxInstances":2}}}},"low":{"realtime":{"nonspark":{"request":{"memory":"250Mi","instances":1,"cpu":"100m"},"limit":{"memory":"500Mi","cpu":"100m","maxInstances":1}},"spark":{"driver":{"corelimit":"1024m","core":0.5,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}},"batch":{"nonspark":{"request":{"memory":"500Mi","instances":1,"cpu":"500m"},"limit":{"memory":"1024Mi","cpu":"1000m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.5,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}}},"medium":{"realtime":{"nonspark":{"request":{"memory":"1024Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"2048Mi","cpu":"1000m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.1,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}},"batch":{"nonspark":{"request":{"memory":"1024Mi","instances":1,"cpu":"100m"},"limit":{"memory":"2048Mi","cpu":"250m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.1,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}}}},"confType":"resource_new","isActive":true},"componentInstId":"comp1700473896753_inst_5987","uiId":"95ea-ebc2-46d5-b3c0-b216","componentName":"tvo2_backfill_input","configurationType":"low","pipelineId":"dp_17004736553674710"},{"configuration":{"confId":122334,"confName":"resource_new","confDetails":{"high":{"realtime":{"nonspark":{"request":{"memory":"2048Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"4048Mi","cpu":"2500m","maxInstances":1}},"spark":{"driver":{"corelimit":"1024m","core":1,"memory":"2048m"},"executor":{"core":1,"memory":"2048m","instances":3,"maxInstances":3}}},"batch":{"nonspark":{"request":{"memory":"4096Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"6048Mi","cpu":"2000m","maxInstances":1}},"spark":{"driver":{"corelimit":"4096m","core":1,"memory":"2048m"},"executor":{"core":1,"memory":"4096m","instances":2,"maxInstances":2}}}},"low":{"realtime":{"nonspark":{"request":{"memory":"2048Mi","instances":3,"cpu":"2500m"},"limit":{"memory":"4096Mi","cpu":"2500m","maxInstances":3}},"spark":{"driver":{"corelimit":"1024m","core":0.5,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}},"batch":{"nonspark":{"request":{"memory":"250Mi","instances":1,"cpu":"100m"},"limit":{"memory":"500Mi","cpu":"100m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.5,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}}},"medium":{"realtime":{"nonspark":{"request":{"memory":"1024Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"2048Mi","cpu":"1000m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.1,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}},"batch":{"nonspark":{"request":{"memory":"1024Mi","instances":1,"cpu":"100m"},"limit":{"memory":"2048Mi","cpu":"250m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.1,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}}}},"confType":"resource_new","isActive":true},"componentInstId":"comp1700474350629_inst_3035","uiId":"929b-3604-43ca-b949-6c0f","componentName":"DSLab Runner","configurationType":"low","pipelineId":"dp_17004736553674710"},{"configuration":{"confId":122334,"confName":"resource_new","confDetails":{"high":{"realtime":{"nonspark":{"request":{"memory":"2048Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"4048Mi","cpu":"2500m","maxInstances":1}},"spark":{"driver":{"corelimit":"1024m","core":1,"memory":"2048m"},"executor":{"core":1,"memory":"2048m","instances":3,"maxInstances":3}}},"batch":{"nonspark":{"request":{"memory":"4096Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"6048Mi","cpu":"2000m","maxInstances":1}},"spark":{"driver":{"corelimit":"4096m","core":1,"memory":"2048m"},"executor":{"core":1,"memory":"4096m","instances":2,"maxInstances":2}}}},"low":{"realtime":{"nonspark":{"request":{"memory":"250Mi","instances":1,"cpu":"100m"},"limit":{"memory":"500Mi","cpu":"100m","maxInstances":1}},"spark":{"driver":{"corelimit":"1024m","core":0.5,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}},"batch":{"nonspark":{"request":{"memory":"500Mi","instances":1,"cpu":"500m"},"limit":{"memory":"1024Mi","cpu":"1000m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.5,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}}},"medium":{"realtime":{"nonspark":{"request":{"memory":"1024Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"2048Mi","cpu":"1000m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.1,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}},"batch":{"nonspark":{"request":{"memory":"1024Mi","instances":1,"cpu":"100m"},"limit":{"memory":"2048Mi","cpu":"250m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.1,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}}}},"confType":"resource_new","isActive":true},"componentInstId":"comp1700477948777_inst_6559","uiId":"73f8-cf2a-473a-bf30-0d0b","componentName":"tvo2_backfill_input","configurationType":"low","pipelineId":"dp_17004736553674710"},{"configuration":{"confId":122334,"confName":"resource_new","confDetails":{"high":{"realtime":{"nonspark":{"request":{"memory":"2048Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"4048Mi","cpu":"2500m","maxInstances":1}},"spark":{"driver":{"corelimit":"1024m","core":1,"memory":"2048m"},"executor":{"core":1,"memory":"2048m","instances":3,"maxInstances":3}}},"batch":{"nonspark":{"request":{"memory":"4096Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"6048Mi","cpu":"2000m","maxInstances":1}},"spark":{"driver":{"corelimit":"4096m","core":1,"memory":"2048m"},"executor":{"core":1,"memory":"4096m","instances":2,"maxInstances":2}}}},"low":{"realtime":{"nonspark":{"request":{"memory":"250Mi","instances":1,"cpu":"250m"},"limit":{"memory":"500Mi","cpu":"500m","maxInstances":1}},"spark":{"driver":{"corelimit":"1024m","core":0.5,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}},"batch":{"nonspark":{"request":{"memory":"250Mi","instances":1,"cpu":"250m"},"limit":{"memory":"500Mi","cpu":"500m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.5,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}}},"medium":{"realtime":{"nonspark":{"request":{"memory":"1024Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"2048Mi","cpu":"1000m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.1,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}},"batch":{"nonspark":{"request":{"memory":"1024Mi","instances":1,"cpu":"100m"},"limit":{"memory":"2048Mi","cpu":"250m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.1,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}}}},"confType":"resource_new","isActive":true},"componentInstId":"comp1700473989110_inst_8626","uiId":"2d8f-21e7-4c78-8f76-c047","componentName":"load_balancer","configurationType":"low","pipelineId":"dp_17004736553674710"},{"configuration":{"confId":122334,"confName":"resource_new","confDetails":{"high":{"realtime":{"nonspark":{"request":{"memory":"2048Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"4048Mi","cpu":"2500m","maxInstances":1}},"spark":{"driver":{"corelimit":"1024m","core":1,"memory":"2048m"},"executor":{"core":1,"memory":"2048m","instances":3,"maxInstances":3}}},"batch":{"nonspark":{"request":{"memory":"4096Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"6048Mi","cpu":"2000m","maxInstances":1}},"spark":{"driver":{"corelimit":"4096m","core":1,"memory":"2048m"},"executor":{"core":1,"memory":"4096m","instances":2,"maxInstances":2}}}},"low":{"realtime":{"nonspark":{"request":{"memory":"1024Mi","instances":3,"cpu":"1000m"},"limit":{"memory":"2048Mi","cpu":"2500m","maxInstances":3}},"spark":{"driver":{"corelimit":"1024m","core":0.5,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}},"batch":{"nonspark":{"request":{"memory":"250Mi","instances":1,"cpu":"100m"},"limit":{"memory":"500Mi","cpu":"100m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.5,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}}},"medium":{"realtime":{"nonspark":{"request":{"memory":"1024Mi","instances":1,"cpu":"1000m"},"limit":{"memory":"2048Mi","cpu":"1000m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.1,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}},"batch":{"nonspark":{"request":{"memory":"1024Mi","instances":1,"cpu":"100m"},"limit":{"memory":"2048Mi","cpu":"250m","maxInstances":1}},"spark":{"driver":{"corelimit":"2048m","core":0.1,"memory":"1024m"},"executor":{"core":1,"memory":"1024m","instances":1,"maxInstances":1}}}}},"confType":"resource_new","isActive":true},"componentInstId":"comp1700477854606_inst_1830","uiId":"0786-f76e-4c9e-a7b7-1db8","componentName":"DSLab Runner","configurationType":"low","pipelineId":"dp_17004736553674710"}],"datacenterContent":"{\"queryService\":[],\"dsLabNotebookScriptContent\":{\"5308499\":\"{\\\"dslabserviceresp\\\":{\\\"queryService\\\":[],\\\"bizvizWorkspace\\\":\\\"{\\\\\\\"reserv1\\\\\\\":null,\\\\\\\"reserv2\\\\\\\":null,\\\\\\\"reserv3\\\\\\\":null,\\\\\\\"reserv4\\\\\\\":null,\\\\\\\"reserv5\\\\\\\":null,\\\\\\\"createdDate\\\\\\\":1699240326942,\\\\\\\"isActive\\\\\\\":0,\\\\\\\"lastUpdatedDate\\\\\\\":null,\\\\\\\"active\\\\\\\":1,\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4751365,\\\\\\\"name\\\\\\\":\\\\\\\"TVO20\\\\\\\",\\\\\\\"count\\\\\\\":null,\\\\\\\"parentId\\\\\\\":null,\\\\\\\"userId\\\\\\\":\\\\\\\"622598\\\\\\\",\\\\\\\"isFile\\\\\\\":false,\\\\\\\"infoJson\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"imageVersion\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"w8.5.3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"external_libraries\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"boto3==1.21.5,holidays==0.13,impyute==0.0.8,kendall_w==1.0.0,numpy==1.22.2,psycopg2==2.9.3,PuLP==2.6.0,scikit-learn==1.2.2,scipy==1.8.0,skranger==0.8.0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"imageName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"580240783317.dkr.ecr.us-west-2.amazonaws.com/dsnotebook-tensorflow\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"confDetails\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"high\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"nonspark\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"request\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"memory\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2048Mi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cpu\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1000m\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\"limit\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"memory\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"4048Mi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cpu\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2500m\\\\\\\\\\\\\\\"}}},\\\\\\\\\\\\\\\"low\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"realtime\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"nonspark\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"request\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"memory\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1024Mi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cpu\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"500m\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\"limit\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"memory\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1024Mi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cpu\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1000m\\\\\\\\\\\\\\\"}}}},\\\\\\\\\\\\\\\"medium\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"nonspark\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"request\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"memory\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1024Mi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cpu\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1000m\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\"limit\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"memory\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2048Mi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cpu\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1000m\\\\\\\\\\\\\\\"}}}},\\\\\\\\\\\\\\\"idle_shutdown\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"30m\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"apiImageVersion\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"8.5.0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"appName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"git_project\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"project_url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"juice-media/tvo2.0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"project_name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"TVO20\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"removedLibraries\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"environment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"PythonTensorFlow\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"project_description\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"TVO 2.0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Algorithms\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"gpuLimit\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"projectLabel\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"tvo2.0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"resource_allocation\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"medium\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"configured_branch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"master\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"apiImageName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"580240783317.dkr.ecr.us-west-2.amazonaws.com/dsmodelapi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"gpuType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"branchLabel\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"master\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"type\\\\\\\":10,\\\\\\\"status\\\\\\\":1,\\\\\\\"contentJson\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"CreateProjectKey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Create_Project\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"templateJson\\\\\\\":null,\\\\\\\"isShared\\\\\\\":null,\\\\\\\"updatedBy\\\\\\\":\\\\\\\"4030470\\\\\\\",\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240326942\\\\\\\",\\\\\\\"createdUserName\\\\\\\":null}\\\",\\\"envVariables\\\":\\\"[]\\\",\\\"utility\\\":\\\"[{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":5341241,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"config\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581513000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581513000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"config.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111700079618152\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849690,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"pipeline\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581509000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581509000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"pipeline.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240494692\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849689,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"performance\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581506000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581506000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"performance.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240458660\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849688,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"optimization\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581502000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581502000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"optimization.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240434154\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849687,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"main\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581499000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581499000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"main.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240420079\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849686,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"utils\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581495000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581495000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"utils.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240405540\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849685,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"pipeline_helpers\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581492000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581492000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"pipeline_helpers.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240393708\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849684,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"connections_aws\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581489000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581489000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"connections_aws.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240371111\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849683,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"base_logger\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581485000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581485000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"base_logger.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240356279\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null}]\\\",\\\"utilityContent\\\":\\\"{\\\\\\\"4849685\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"5341241\\\\\\\":\\\\\\\"UzNfVEFSR0VUX0JVQ0tFVF9QRVJGT1JNQU5DRSA9IE5vbmUKUzNfVEFSR0VUX1BBVEhfUEVSRk9STUFOQ0UgPSBOb25lClMzX1RBUkdFVF9QQVRIX1BFUkZPUk1BTkNFX1RWTyA9IE5vbmUKClNFQ1JFVF9OQU1FID0gTm9uZQpSRUdJT05fTkFNRSA9IE5vbmUKQVdTX0FDQ0VTU19LRVlfSUQgPSBOb25lCkFXU19TRUNSRVRfQUNDRVNTX0tFWSA9IE5vbmUKUzMgPSBOb25lCkFUSEVOQV9DTElFTlQgPSBOb25lCkFUSEVOQV9TVEFUVVNfT1VUUFVUX0xPQ0FUSU9OID0gTm9uZQpSRURTSElGVF9DT05OID0gTm9uZQpRVUVSWV9CVUNLRVQgPSBOb25lCkFUSEVOQV9EQVRBQkFTRSA9IE5vbmUKClNQT1REQVRBX1NPVVJDRSA9ICdtZWRpYV9vY2Vhbl9kYXRhJw==\\\\\\\",\\\\\\\"4849686\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"4849683\\\\\\\":\\\\\\\"aW1wb3J0IGxvZ2dpbmcKaW1wb3J0IHBzeWNvcGcyCgptZXNfZm9ybWF0ID0gJyUoYXNjdGltZSlzICUobGV2ZWxuYW1lKXMgJShuYW1lKXM6ICUobWVzc2FnZSlzJwpkYXRfZm9ybWF0ID0gJyVZLSVtLSVkICVIOiVNOiVTJwpsb2dnaW5nLmJhc2ljQ29uZmlnKGZvcm1hdD1tZXNfZm9ybWF0LCBkYXRlZm10PWRhdF9mb3JtYXQpCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCdUVk8gMi4wJykKbG9nZ2VyLnNldExldmVsKGxvZ2dpbmcuSU5GTykK\\\\\\\",\\\\\\\"4849684\\\\\\\":\\\\\\\"aW1wb3J0IGpzb24KaW1wb3J0IGJvdG8zCmltcG9ydCBiYXNlNjQKZnJvbSBzeXMgaW1wb3J0IGV4Y19pbmZvCmltcG9ydCBwc3ljb3BnMgpmcm9tIGJhc2VfbG9nZ2VyIGltcG9ydCBsb2dnZXIKaW1wb3J0IGNvbmZpZwpmcm9tIGlvIGltcG9ydCBCeXRlc0lPCmltcG9ydCBwYW5kYXMgYXMgcGQKCiMjIyMjIyMjIyMjIyBSRVFVSVJFTUVOVFMgIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBzdWRvIGFwdC1nZXQgaW5zdGFsbCBsaWJwcS1kZXYKIyBzdWRvIHBpcCBpbnN0YWxsIHBzeWNvcGcyCiMgc3VkbyBwaXAgaW5zdGFsbCBzcWxhbGNoZW15CiMgc3VkbyBwaXAgaW5zdGFsbCBzcWxhbGNoZW15LXJlZHNoaWZ0CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCgpkZWYgZ2V0X3JlZHNoaWZ0X3NlY3JldCgpOgogICAgIyBzZWNyZXRfbmFtZSA9ICJjb25uZWN0aW9uLXRuLXJlZHNoaWZ0LXR2by9tdGEiCiAgICAjIHJlZ2lvbl9uYW1lID0gInVzLXdlc3QtMiIKCiAgICAjIGNvbm5lY3RzIHRvIEFXUyBzZWNyZXRzIG1hbmFnZXIgdG8gZ2V0IGNyZWRlbnRpYWxzCiAgICBzZXNzaW9uID0gYm90bzMuc2Vzc2lvbi5TZXNzaW9uKCkKICAgIGNsaWVudCA9IHNlc3Npb24uY2xpZW50KAogICAgICAgIHNlcnZpY2VfbmFtZT0nc2VjcmV0c21hbmFnZXInLCByZWdpb25fbmFtZT1jb25maWcuUkVHSU9OX05BTUUsCiAgICAgICAgICAgIGF3c19hY2Nlc3Nfa2V5X2lkPWNvbmZpZy5BV1NfQUNDRVNTX0tFWV9JRCwKICAgICAgICAgICAgYXdzX3NlY3JldF9hY2Nlc3Nfa2V5PWNvbmZpZy5BV1NfU0VDUkVUX0FDQ0VTU19LRVkpCgogICAgdHJ5OgogICAgICAgIGdldF9zZWNyZXRfdmFsdWVfcmVzcG9uc2UgPSBjbGllbnQuZ2V0X3NlY3JldF92YWx1ZSgKICAgICAgICAgICAgU2VjcmV0SWQ9Y29uZmlnLlNFQ1JFVF9OQU1FKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHJhaXNlIGUKICAgIGVsc2U6CiAgICAgICAgaWYgJ1NlY3JldFN0cmluZycgaW4gZ2V0X3NlY3JldF92YWx1ZV9yZXNwb25zZToKICAgICAgICAgICAgc2VjcmV0ID0gZ2V0X3NlY3JldF92YWx1ZV9yZXNwb25zZVsnU2VjcmV0U3RyaW5nJ10KICAgICAgICBlbHNlOgogICAgICAgICAgICBkZWNvZGVkX2JpbmFyeV9zZWNyZXQgPSBiYXNlNjQuYjY0ZGVjb2RlKAogICAgICAgICAgICAgICAgZ2V0X3NlY3JldF92YWx1ZV9yZXNwb25zZVsnU2VjcmV0QmluYXJ5J10pCiAgICByZXR1cm4ganNvbi5sb2FkcyhzZWNyZXQpCgoKZGVmIGdldF9yZWRzaGlmdF9jb25uZWN0aW9uKCk6CiAgICAjIGNyZWF0ZXMgZGF0YSBiYXNlIGNvbm5lY3Rpb24gYW5kIHBhc3NlcyBpdCBiYWNrIHRvIGNhbGxlcgogICAgdHJ5OgogICAgICAgIGxvZ2dlci5pbmZvKCcoY29ubmVjdGlvbnNfYXdzLmdldF9yZWRzaGlmdF9jb25uZWN0aW9uKSBHZXR0aW5nIERhdGFiYXNlIENvbm5lY3Rpb24nKQogICAgICAgIHNlY3JldHMgPSBnZXRfcmVkc2hpZnRfc2VjcmV0KCkKICAgICAgICBjb25uID0gcHN5Y29wZzIuY29ubmVjdChkYm5hbWU9c2VjcmV0c1snREFUQUJBU0UnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0PXNlY3JldHNbJ0hPU1QnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3J0PXNlY3JldHNbJ1BPUlQnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyPXNlY3JldHNbJ1VTRVInXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZD1zZWNyZXRzWydQQVNTV09SRCddKQogICAgICAgIHJldHVybiBjb25uCgogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGxvZ2dlci5lcnJvcihmJ0Vycm9yIGdldHRpbmcgY29ubmVjdGlvbiBkZXRhaWxzOiBMaW5lOiB7Zm9ybWF0KGV4Y19pbmZvKClbLTFdLnRiX2xpbmVubyl9OiB7ZX0nKQogICAgICAgICMgc3lzLmV4aXQoMSkKICAgICAgICByYWlzZSBFeGNlcHRpb24oZidFcnJvciBnZXR0aW5nIGNvbm5lY3Rpb24gZGV0YWlsczogTGluZToge2Zvcm1hdChleGNfaW5mbygpWy0xXS50Yl9saW5lbm8pfToge2V9JykKCgpkZWYgZ2V0X2F0aGVuYV9jb25uZWN0aW9uKCk6CiAgICBhdGhlbmFfY2xpZW50ID0gYm90bzMuY2xpZW50KAogICAgICAgICdhdGhlbmEnLCAKICAgICAgICByZWdpb25fbmFtZT1jb25maWcuUkVHSU9OX05BTUUsIAogICAgICAgIGF3c19hY2Nlc3Nfa2V5X2lkPWNvbmZpZy5BV1NfQUNDRVNTX0tFWV9JRCwgCiAgICAgICAgYXdzX3NlY3JldF9hY2Nlc3Nfa2V5PWNvbmZpZy5BV1NfU0VDUkVUX0FDQ0VTU19LRVkKICAgICkKICAgIHJldHVybiBhdGhlbmFfY2xpZW50CgoKZGVmIHJ1bl9hdGhlbmFfcXVlcnkocXVlcnkpOgogICAgCiAgICBsb2dnZXIuaW5mbyhmJ1N0YXJ0aW5nIEF0aGVuYSBxdWVyeSBleGVjdXRpb24nKQogICAgbG9nZ2VyLmluZm8oZidBdGhlbmEgcXVlcnk6XG57cXVlcnl9JykKICAgIHJlc3BvbnNlID0gY29uZmlnLkFUSEVOQV9DTElFTlQuc3RhcnRfcXVlcnlfZXhlY3V0aW9uKAogICAgICAgIFF1ZXJ5U3RyaW5nPXF1ZXJ5LAogICAgICAgIFF1ZXJ5RXhlY3V0aW9uQ29udGV4dD17J0RhdGFiYXNlJzogY29uZmlnLkFUSEVOQV9EQVRBQkFTRX0sCiAgICAgICAgUmVzdWx0Q29uZmlndXJhdGlvbj17J091dHB1dExvY2F0aW9uJzogY29uZmlnLkFUSEVOQV9TVEFUVVNfT1VUUFVUX0xPQ0FUSU9OfSwKICAgICAgICBXb3JrR3JvdXA9J2p1aWNlX2RhdGEnCiAgICApCiAgICAKICAgICMgR2V0IHRoZSBxdWVyeSBleGVjdXRpb24gSUQKICAgIHF1ZXJ5X2V4ZWN1dGlvbl9pZCA9IHJlc3BvbnNlWydRdWVyeUV4ZWN1dGlvbklkJ10KCiAgICAjIFdhaXQgZm9yIHRoZSBxdWVyeSB0byBjb21wbGV0ZQogICAgd2hpbGUgVHJ1ZToKICAgICAgICBxdWVyeV9zdGF0dXMgPSBjb25maWcuQVRIRU5BX0NMSUVOVC5nZXRfcXVlcnlfZXhlY3V0aW9uKFF1ZXJ5RXhlY3V0aW9uSWQ9cXVlcnlfZXhlY3V0aW9uX2lkKQogICAgICAgIHN0YXR1cyA9IHF1ZXJ5X3N0YXR1c1snUXVlcnlFeGVjdXRpb24nXVsnU3RhdHVzJ11bJ1N0YXRlJ10KCiAgICAgICAgaWYgc3RhdHVzIGluIFsnU1VDQ0VFREVEJywgJ0ZBSUxFRCcsICdDQU5DRUxMRUQnXToKICAgICAgICAgICAgYnJlYWsKCiAgICAjIFJldHJpZXZlIGFuZCByZXR1cm4gdGhlIHF1ZXJ5IHJlc3VsdHMgaWYgdGhlIHF1ZXJ5IHN1Y2NlZWRlZAogICAgaWYgc3RhdHVzID09ICdTVUNDRUVERUQnOgojICAgICAgICAgcmVzdWx0cyA9IEFUSEVOQV9DTElFTlQuZ2V0X3F1ZXJ5X3Jlc3VsdHMoUXVlcnlFeGVjdXRpb25JZD1xdWVyeV9leGVjdXRpb25faWQpCiMgICAgICAgICByZXN1bHRzID0gZm9ybWF0X2F0aGVuYV9yZXN1bHRzKHJlc3VsdHMpCiAgICAgICAgczNfcmVzcG9uc2Vfb2JqZWN0ID0gY29uZmlnLlMzLmdldF9vYmplY3QoQnVja2V0PWNvbmZpZy5RVUVSWV9CVUNLRVQsIEtleT1mIntjb25maWcuQVRIRU5BX1NUQVRVU19PVVRQVVRfTE9DQVRJT04uc3BsaXQoJy8nKVstMl19L3txdWVyeV9leGVjdXRpb25faWR9LmNzdiIpCiAgICAgICAgb2JqZWN0X2NvbnRlbnQgPSBzM19yZXNwb25zZV9vYmplY3RbJ0JvZHknXS5yZWFkKCkKICAgICAgICByZXN1bHRzID0gcGQucmVhZF9jc3YoQnl0ZXNJTyhvYmplY3RfY29udGVudCkpCiAgICAgICAgbG9nZ2VyLmluZm8oZidBdGhlbmEgcXVlcnkgcmFuIHN1Y2Nlc3NmdWxseScpCiAgICAgICAgcmV0dXJuIHJlc3VsdHMKICAgIGVsaWYgc3RhdHVzID09ICdGQUlMRUQnOgogICAgICAgIHJhaXNlIEV4Y2VwdGlvbignUXVlcnkgZnJvbSBBdGhlbmEgZmFpbGVkJykKICAgIAoKZGVmIGNsb3NlX2Nvbm5lY3Rpb25zKCk6CgogICAgY29uZmlnLlJFRFNISUZUX0NPTk4uY2xvc2UoKQogICAgIyBjb25maWcuUzMuY2xvc2UoKQogICAgIyBjb25maWcuQVRIRU5BX0NMSUVOVC5jbG9zZSgpCiAgICBsb2dnZXIuZGVidWcoZidDbG9zZWQgYWxsIGNvbm5lY3Rpb25zJyk=\\\\\\\",\\\\\\\"4849689\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"4849687\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"4849688\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"4849690\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"sandboxService\\\":[],\\\"notebookContent\\\":\\\"{\\\\\\\"nbformat_minor\\\\\\\":2,\\\\\\\"metadata\\\\\\\":{},\\\\\\\"cells\\\\\\\":[{\\\\\\\"outputs\\\\\\\":[],\\\\\\\"metadata\\\\\\\":{\\\\\\\"id\\\\\\\":\\\\\\\"5308440_0.5987037587311062\\\\\\\"},\\\\\\\"execution_count\\\\\\\":null,\\\\\\\"source\\\\\\\":[\\\\\\\"import config\\\\\\\\nimport main\\\\\\\\nfrom time import perf_counter\\\\\\\\nimport logging\\\\\\\\nimport boto3\\\\\\\\n\\\\\\\\ndef get_athena_connection(REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY):\\\\\\\\n    athena_client = boto3.client(\\\\\\\\n        'athena', \\\\\\\\n        region_name=REGION_NAME, \\\\\\\\n        aws_access_key_id=AWS_ACCESS_KEY_ID, \\\\\\\\n        aws_secret_access_key=AWS_SECRET_ACCESS_KEY\\\\\\\\n    )\\\\\\\\n    return athena_client\\\\\\\\n\\\\\\\\ndef run_athena_query(query, ATHENA_DATABASE, ATHENA_STATUS_OUTPUT_LOCATION,\\\\\\\\n                    REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY):\\\\\\\\n    \\\\\\\\n    ATHENA_CLIENT = get_athena_connection(REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)\\\\\\\\n        \\\\\\\\n    logging.info(f'Starting Athena query execution')\\\\\\\\n    logging.info(f'Athena query:\\\\\\\\\\\\\\\\n{query}')\\\\\\\\n    response = ATHENA_CLIENT.start_query_execution(\\\\\\\\n        QueryString=query,\\\\\\\\n        QueryExecutionContext={'Database': ATHENA_DATABASE},\\\\\\\\n        ResultConfiguration={'OutputLocation': ATHENA_STATUS_OUTPUT_LOCATION},\\\\\\\\n        WorkGroup='juice_data'\\\\\\\\n    )\\\\\\\\n    \\\\\\\\n    # Get the query execution ID\\\\\\\\n    query_execution_id = response['QueryExecutionId']\\\\\\\\n\\\\\\\\n    # Wait for the query to complete\\\\\\\\n    while True:\\\\\\\\n        query_status = ATHENA_CLIENT.get_query_execution(QueryExecutionId=query_execution_id)\\\\\\\\n        status = query_status['QueryExecution']['Status']['State']\\\\\\\\n        if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:\\\\\\\\n            break\\\\\\\\n\\\\\\\\n    # Retrieve and return the query results if the query succeeded\\\\\\\\n    if status == 'SUCCEEDED':\\\\\\\\n        logging.info(f'Athena query ran successfully')\\\\\\\\n    elif status == 'FAILED':\\\\\\\\n        raise Exception('Query from Athena failed') \\\\\\\\n\\\\\\\\n\\\\\\\\ndef tvo_driver(input_data, s3_target_bucket_performance, s3_target_path_performance, s3_target_path_performance_tvo,\\\\\\\\n                secret_name, region_name, athena_database, aws_access_key_id,\\\\\\\\n                aws_secret_access_key, athena_status_output_location, query_bucket):\\\\\\\\n    \\\\\\\\n    logging.info(f'TVO 2 process started')\\\\\\\\n    input_data = input_data[0]\\\\\\\\n    start_time = perf_counter()\\\\\\\\n        \\\\\\\\n    # Getting config variables\\\\\\\\n    main.init_config(s3_target_bucket_performance, s3_target_path_performance, s3_target_path_performance_tvo,\\\\\\\\n                secret_name, region_name, athena_database, aws_access_key_id,\\\\\\\\n                aws_secret_access_key, athena_status_output_location, query_bucket)\\\\\\\\n    \\\\\\\\n    # TVO2 process\\\\\\\\n    results = main._main(input_data) \\\\\\\\n    logging.info(f'TVO 2 process finished in {round(perf_counter() - start_time, 3)} seconds')\\\\\\\\n    results[0]['process_time_minutes'] = round(round(perf_counter() - start_time, 3)/60,3)\\\\\\\\n    \\\\\\\\n    # Doing MSCK repair\\\\\\\\n    table_name = f\\\\\\\\\\\\\\\"{athena_database}.tvo_2_0\\\\\\\\\\\\\\\"\\\\\\\\n    query = f\\\\\\\\\\\\\\\"MSCK REPAIR TABLE {table_name}\\\\\\\\\\\\\\\"\\\\\\\\n    run_athena_query(query, athena_database, athena_status_output_location, region_name,\\\\\\\\n                    aws_access_key_id, aws_secret_access_key)\\\\\\\\n    return results\\\\\\\"],\\\\\\\"cell_type\\\\\\\":\\\\\\\"code\\\\\\\"}],\\\\\\\"nbformat\\\\\\\":4}\\\",\\\"secrets\\\":\\\"{\\\\\\\"reserv1\\\\\\\":null,\\\\\\\"reserv2\\\\\\\":null,\\\\\\\"reserv3\\\\\\\":null,\\\\\\\"reserv4\\\\\\\":null,\\\\\\\"reserv5\\\\\\\":null,\\\\\\\"createdDate\\\\\\\":null,\\\\\\\"isActive\\\\\\\":0,\\\\\\\"lastUpdatedDate\\\\\\\":null,\\\\\\\"active\\\\\\\":1,\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":2162688,\\\\\\\"type\\\\\\\":\\\\\\\"210\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"settings\\\\\\\":\\\\\\\"[{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"AWS\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"ACCESS_KEY_ID_BDB\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"SECRET_KEY_BDB\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"REGION\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"NAME\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"PROD\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"BUCKET\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"QUERY\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"RESULTS\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"SOURCE\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"BUCKET\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"BDB\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"BUCKET\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"ATHENA\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"DATABASE\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"ATTRIBUTION\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"BUCKET\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"CLIENT\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"UPLOADS_BUCKET\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"REDSHIFT\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"MTA_SECRET_NAME\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"WURFL\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"BUCKET\\\\\\\\\\\\\\\"]}]\\\\\\\"}\\\",\\\"dataSource\\\":[],\\\"notebook\\\":\\\"{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":5308499,\\\\\\\"projectId\\\\\\\":4751365,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"notebookName\\\\\\\":\\\\\\\"tvo2_driver\\\\\\\",\\\\\\\"data\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"datasets\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"uncheckeddatasets\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\":[{\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5308440_0.5987037587311062\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"import config\\\\\\\\\\\\\\\\nimport main\\\\\\\\\\\\\\\\nfrom time import perf_counter\\\\\\\\\\\\\\\\nimport logging\\\\\\\\\\\\\\\\nimport boto3\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef get_athena_connection(REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY):\\\\\\\\\\\\\\\\n    athena_client = boto3.client(\\\\\\\\\\\\\\\\n        'athena', \\\\\\\\\\\\\\\\n        region_name=REGION_NAME, \\\\\\\\\\\\\\\\n        aws_access_key_id=AWS_ACCESS_KEY_ID, \\\\\\\\\\\\\\\\n        aws_secret_access_key=AWS_SECRET_ACCESS_KEY\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\n    return athena_client\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef run_athena_query(query, ATHENA_DATABASE, ATHENA_STATUS_OUTPUT_LOCATION,\\\\\\\\\\\\\\\\n                    REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    ATHENA_CLIENT = get_athena_connection(REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n    logging.info(f'Starting Athena query execution')\\\\\\\\\\\\\\\\n    logging.info(f'Athena query:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{query}')\\\\\\\\\\\\\\\\n    response = ATHENA_CLIENT.start_query_execution(\\\\\\\\\\\\\\\\n        QueryString=query,\\\\\\\\\\\\\\\\n        QueryExecutionContext={'Database': ATHENA_DATABASE},\\\\\\\\\\\\\\\\n        ResultConfiguration={'OutputLocation': ATHENA_STATUS_OUTPUT_LOCATION},\\\\\\\\\\\\\\\\n        WorkGroup='juice_data'\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    # Get the query execution ID\\\\\\\\\\\\\\\\n    query_execution_id = response['QueryExecutionId']\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    # Wait for the query to complete\\\\\\\\\\\\\\\\n    while True:\\\\\\\\\\\\\\\\n        query_status = ATHENA_CLIENT.get_query_execution(QueryExecutionId=query_execution_id)\\\\\\\\\\\\\\\\n        status = query_status['QueryExecution']['Status']['State']\\\\\\\\\\\\\\\\n        if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:\\\\\\\\\\\\\\\\n            break\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    # Retrieve and return the query results if the query succeeded\\\\\\\\\\\\\\\\n    if status == 'SUCCEEDED':\\\\\\\\\\\\\\\\n        logging.info(f'Athena query ran successfully')\\\\\\\\\\\\\\\\n    elif status == 'FAILED':\\\\\\\\\\\\\\\\n        raise Exception('Query from Athena failed') \\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef tvo_driver(input_data, s3_target_bucket_performance, s3_target_path_performance, s3_target_path_performance_tvo,\\\\\\\\\\\\\\\\n                secret_name, region_name, athena_database, aws_access_key_id,\\\\\\\\\\\\\\\\n                aws_secret_access_key, athena_status_output_location, query_bucket):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    logging.info(f'TVO 2 process started')\\\\\\\\\\\\\\\\n    input_data = input_data[0]\\\\\\\\\\\\\\\\n    start_time = perf_counter()\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n    # Getting config variables\\\\\\\\\\\\\\\\n    main.init_config(s3_target_bucket_performance, s3_target_path_performance, s3_target_path_performance_tvo,\\\\\\\\\\\\\\\\n                secret_name, region_name, athena_database, aws_access_key_id,\\\\\\\\\\\\\\\\n                aws_secret_access_key, athena_status_output_location, query_bucket)\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    # TVO2 process\\\\\\\\\\\\\\\\n    results = main._main(input_data) \\\\\\\\\\\\\\\\n    logging.info(f'TVO 2 process finished in {round(perf_counter() - start_time, 3)} seconds')\\\\\\\\\\\\\\\\n    results[0]['process_time_minutes'] = round(round(perf_counter() - start_time, 3)/60,3)\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    # Doing MSCK repair\\\\\\\\\\\\\\\\n    table_name = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{athena_database}.tvo_2_0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    query = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"MSCK REPAIR TABLE {table_name}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    run_athena_query(query, athena_database, athena_status_output_location, region_name,\\\\\\\\\\\\\\\\n                    aws_access_key_id, aws_secret_access_key)\\\\\\\\\\\\\\\\n    return results\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"count\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"mode\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"hover\\\\\\\\\\\\\\\":true,\\\\\\\\\\\\\\\"interrupt\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"warning\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"outputArray\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"lineNumber\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"laodmodel\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"pre_cell_id\\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\\"is_pre_cell\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"succORerr\\\\\\\\\\\\\\\":true,\\\\\\\\\\\\\\\"expand\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"outputexpand\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"readonly\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"markDowns\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"result\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"algorithms\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"semicolon\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cputimes\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"showcputime\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"secret\\\\\\\\\\\\\\\":[]}],\\\\\\\\\\\\\\\"kernalID\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"67242548-30ca-466e-a361-867f1c0b3eb2\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Algorithms\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"isScheduled\\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"tvo2_driver.ipynb\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"description\\\\\\\":null,\\\\\\\"createdDate\\\\\\\":1700493273231,\\\\\\\"lastUpdatedDate\\\\\\\":1700588348617,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":3538945,\\\\\\\"status\\\\\\\":1,\\\\\\\"committedBy\\\\\\\":4030470,\\\\\\\"lastcommittedDate\\\\\\\":1700493273231,\\\\\\\"isShared\\\\\\\":null,\\\\\\\"customComponentscript\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"DSLAB_content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5308440_0.5987037587311062\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"import config\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport main\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom time import perf_counter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport logging\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport boto3\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_athena_connection(REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    athena_client = boto3.client(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        'athena', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        region_name=REGION_NAME, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        aws_access_key_id=AWS_ACCESS_KEY_ID, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        aws_secret_access_key=AWS_SECRET_ACCESS_KEY\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return athena_client\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef run_athena_query(query, ATHENA_DATABASE, ATHENA_STATUS_OUTPUT_LOCATION,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    ATHENA_CLIENT = get_athena_connection(REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logging.info(f'Starting Athena query execution')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logging.info(f'Athena query:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{query}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    response = ATHENA_CLIENT.start_query_execution(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        QueryString=query,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        QueryExecutionContext={'Database': ATHENA_DATABASE},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ResultConfiguration={'OutputLocation': ATHENA_STATUS_OUTPUT_LOCATION},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        WorkGroup='juice_data'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Get the query execution ID\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    query_execution_id = response['QueryExecutionId']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Wait for the query to complete\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    while True:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        query_status = ATHENA_CLIENT.get_query_execution(QueryExecutionId=query_execution_id)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        status = query_status['QueryExecution']['Status']['State']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            break\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Retrieve and return the query results if the query succeeded\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if status == 'SUCCEEDED':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logging.info(f'Athena query ran successfully')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    elif status == 'FAILED':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise Exception('Query from Athena failed') \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef tvo_driver(input_data, s3_target_bucket_performance, s3_target_path_performance, s3_target_path_performance_tvo,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                secret_name, region_name, athena_database, aws_access_key_id,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                aws_secret_access_key, athena_status_output_location, query_bucket):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logging.info(f'TVO 2 process started')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    input_data = input_data[0]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    start_time = perf_counter()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Getting config variables\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    main.init_config(s3_target_bucket_performance, s3_target_path_performance, s3_target_path_performance_tvo,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                secret_name, region_name, athena_database, aws_access_key_id,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                aws_secret_access_key, athena_status_output_location, query_bucket)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # TVO2 process\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    results = main._main(input_data) \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logging.info(f'TVO 2 process finished in {round(perf_counter() - start_time, 3)} seconds')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    results[0]['process_time_minutes'] = round(round(perf_counter() - start_time, 3)/60,3)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Doing MSCK repair\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    table_name = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{athena_database}.tvo_2_0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    query = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"MSCK REPAIR TABLE {table_name}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    run_athena_query(query, athena_database, athena_status_output_location, region_name,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    aws_access_key_id, aws_secret_access_key)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return results\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true}]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pipeline_content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"import config\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport main\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom time import perf_counter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport logging\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport boto3\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_athena_connection(REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    athena_client = boto3.client(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        'athena', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        region_name=REGION_NAME, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        aws_access_key_id=AWS_ACCESS_KEY_ID, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        aws_secret_access_key=AWS_SECRET_ACCESS_KEY\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return athena_client\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef run_athena_query(query, ATHENA_DATABASE, ATHENA_STATUS_OUTPUT_LOCATION,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    ATHENA_CLIENT = get_athena_connection(REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logging.info(f'Starting Athena query execution')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logging.info(f'Athena query:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{query}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    response = ATHENA_CLIENT.start_query_execution(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        QueryString=query,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        QueryExecutionContext={'Database': ATHENA_DATABASE},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ResultConfiguration={'OutputLocation': ATHENA_STATUS_OUTPUT_LOCATION},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        WorkGroup='juice_data'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Get the query execution ID\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    query_execution_id = response['QueryExecutionId']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Wait for the query to complete\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    while True:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        query_status = ATHENA_CLIENT.get_query_execution(QueryExecutionId=query_execution_id)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        status = query_status['QueryExecution']['Status']['State']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            break\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Retrieve and return the query results if the query succeeded\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if status == 'SUCCEEDED':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logging.info(f'Athena query ran successfully')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    elif status == 'FAILED':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise Exception('Query from Athena failed') \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef tvo_driver(input_data, s3_target_bucket_performance, s3_target_path_performance, s3_target_path_performance_tvo,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                secret_name, region_name, athena_database, aws_access_key_id,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                aws_secret_access_key, athena_status_output_location, query_bucket):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logging.info(f'TVO 2 process started')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    input_data = input_data[0]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    start_time = perf_counter()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Getting config variables\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    main.init_config(s3_target_bucket_performance, s3_target_path_performance, s3_target_path_performance_tvo,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                secret_name, region_name, athena_database, aws_access_key_id,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                aws_secret_access_key, athena_status_output_location, query_bucket)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # TVO2 process\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    results = main._main(input_data) \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logging.info(f'TVO 2 process finished in {round(perf_counter() - start_time, 3)} seconds')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    results[0]['process_time_minutes'] = round(round(perf_counter() - start_time, 3)/60,3)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Doing MSCK repair\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    table_name = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{athena_database}.tvo_2_0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    query = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"MSCK REPAIR TABLE {table_name}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    run_athena_query(query, athena_database, athena_status_output_location, region_name,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    aws_access_key_id, aws_secret_access_key)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return results\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"externalLibraries\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"skranger==0.8.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"boto3==1.21.5\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"holidays==0.13\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"impyute==0.0.8\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"kendall_w==1.0.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"psycopg2==2.9.3\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"PuLP==2.6.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scikit-learn==1.2.2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"scipy==1.8.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"skranger==0.8.0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true}]\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"type\\\\\\\":2,\\\\\\\"isScheduled\\\\\\\":null,\\\\\\\"isImported\\\\\\\":1,\\\\\\\"path\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111700493273238\\\\\\\"}\\\",\\\"preparation\\\":[]}}\",\"5308500\":\"{\\\"dslabserviceresp\\\":{\\\"queryService\\\":[],\\\"bizvizWorkspace\\\":\\\"{\\\\\\\"reserv1\\\\\\\":null,\\\\\\\"reserv2\\\\\\\":null,\\\\\\\"reserv3\\\\\\\":null,\\\\\\\"reserv4\\\\\\\":null,\\\\\\\"reserv5\\\\\\\":null,\\\\\\\"createdDate\\\\\\\":1699240326942,\\\\\\\"isActive\\\\\\\":0,\\\\\\\"lastUpdatedDate\\\\\\\":null,\\\\\\\"active\\\\\\\":1,\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4751365,\\\\\\\"name\\\\\\\":\\\\\\\"TVO20\\\\\\\",\\\\\\\"count\\\\\\\":null,\\\\\\\"parentId\\\\\\\":null,\\\\\\\"userId\\\\\\\":\\\\\\\"622598\\\\\\\",\\\\\\\"isFile\\\\\\\":false,\\\\\\\"infoJson\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"imageVersion\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"w8.5.3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"external_libraries\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"boto3==1.21.5,holidays==0.13,impyute==0.0.8,kendall_w==1.0.0,numpy==1.22.2,psycopg2==2.9.3,PuLP==2.6.0,scikit-learn==1.2.2,scipy==1.8.0,skranger==0.8.0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"imageName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"580240783317.dkr.ecr.us-west-2.amazonaws.com/dsnotebook-tensorflow\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"confDetails\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"high\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"nonspark\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"request\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"memory\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2048Mi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cpu\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1000m\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\"limit\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"memory\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"4048Mi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cpu\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2500m\\\\\\\\\\\\\\\"}}},\\\\\\\\\\\\\\\"low\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"realtime\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"nonspark\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"request\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"memory\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1024Mi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cpu\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"500m\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\"limit\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"memory\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1024Mi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cpu\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1000m\\\\\\\\\\\\\\\"}}}},\\\\\\\\\\\\\\\"medium\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"nonspark\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"request\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"memory\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1024Mi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cpu\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1000m\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\"limit\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"memory\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2048Mi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cpu\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1000m\\\\\\\\\\\\\\\"}}}},\\\\\\\\\\\\\\\"idle_shutdown\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"30m\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"apiImageVersion\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"8.5.0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"appName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"git_project\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"project_url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"juice-media/tvo2.0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"project_name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"TVO20\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"removedLibraries\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"environment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"PythonTensorFlow\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"project_description\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"TVO 2.0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Algorithms\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"gpuLimit\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"projectLabel\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"tvo2.0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"resource_allocation\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"medium\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"configured_branch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"master\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"apiImageName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"580240783317.dkr.ecr.us-west-2.amazonaws.com/dsmodelapi\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"gpuType\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"branchLabel\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"master\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"type\\\\\\\":10,\\\\\\\"status\\\\\\\":1,\\\\\\\"contentJson\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"CreateProjectKey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Create_Project\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"templateJson\\\\\\\":null,\\\\\\\"isShared\\\\\\\":null,\\\\\\\"updatedBy\\\\\\\":\\\\\\\"4030470\\\\\\\",\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240326942\\\\\\\",\\\\\\\"createdUserName\\\\\\\":null}\\\",\\\"envVariables\\\":\\\"[]\\\",\\\"utility\\\":\\\"[{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":5341241,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"config\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581513000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581513000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"config.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111700079618152\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849690,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"pipeline\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581509000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581509000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"pipeline.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240494692\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849689,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"performance\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581506000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581506000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"performance.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240458660\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849688,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"optimization\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581502000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581502000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"optimization.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240434154\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849687,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"main\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581499000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581499000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"main.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240420079\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849686,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"utils\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581495000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581495000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"utils.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240405540\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849685,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"pipeline_helpers\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581492000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581492000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"pipeline_helpers.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240393708\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849684,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"connections_aws\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581489000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581489000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"connections_aws.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240371111\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null},{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":4849683,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"base_logger\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"from vcs imported file\\\\\\\",\\\\\\\"createdDate\\\\\\\":1700581485000,\\\\\\\"lastUpdatedDate\\\\\\\":1700581485000,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"properties\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"base_logger.py\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"isImported\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"completionStatus\\\\\\\":1,\\\\\\\"type\\\\\\\":\\\\\\\"py\\\\\\\",\\\\\\\"reference_id\\\\\\\":4751365,\\\\\\\"prepJson\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111699240356279\\\\\\\",\\\\\\\"fileType\\\\\\\":null,\\\\\\\"createdTime\\\\\\\":null}]\\\",\\\"utilityContent\\\":\\\"{\\\\\\\"4849685\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"5341241\\\\\\\":\\\\\\\"UzNfVEFSR0VUX0JVQ0tFVF9QRVJGT1JNQU5DRSA9IE5vbmUKUzNfVEFSR0VUX1BBVEhfUEVSRk9STUFOQ0UgPSBOb25lClMzX1RBUkdFVF9QQVRIX1BFUkZPUk1BTkNFX1RWTyA9IE5vbmUKClNFQ1JFVF9OQU1FID0gTm9uZQpSRUdJT05fTkFNRSA9IE5vbmUKQVdTX0FDQ0VTU19LRVlfSUQgPSBOb25lCkFXU19TRUNSRVRfQUNDRVNTX0tFWSA9IE5vbmUKUzMgPSBOb25lCkFUSEVOQV9DTElFTlQgPSBOb25lCkFUSEVOQV9TVEFUVVNfT1VUUFVUX0xPQ0FUSU9OID0gTm9uZQpSRURTSElGVF9DT05OID0gTm9uZQpRVUVSWV9CVUNLRVQgPSBOb25lCkFUSEVOQV9EQVRBQkFTRSA9IE5vbmUKClNQT1REQVRBX1NPVVJDRSA9ICdtZWRpYV9vY2Vhbl9kYXRhJw==\\\\\\\",\\\\\\\"4849686\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"4849683\\\\\\\":\\\\\\\"aW1wb3J0IGxvZ2dpbmcKaW1wb3J0IHBzeWNvcGcyCgptZXNfZm9ybWF0ID0gJyUoYXNjdGltZSlzICUobGV2ZWxuYW1lKXMgJShuYW1lKXM6ICUobWVzc2FnZSlzJwpkYXRfZm9ybWF0ID0gJyVZLSVtLSVkICVIOiVNOiVTJwpsb2dnaW5nLmJhc2ljQ29uZmlnKGZvcm1hdD1tZXNfZm9ybWF0LCBkYXRlZm10PWRhdF9mb3JtYXQpCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCdUVk8gMi4wJykKbG9nZ2VyLnNldExldmVsKGxvZ2dpbmcuSU5GTykK\\\\\\\",\\\\\\\"4849684\\\\\\\":\\\\\\\"aW1wb3J0IGpzb24KaW1wb3J0IGJvdG8zCmltcG9ydCBiYXNlNjQKZnJvbSBzeXMgaW1wb3J0IGV4Y19pbmZvCmltcG9ydCBwc3ljb3BnMgpmcm9tIGJhc2VfbG9nZ2VyIGltcG9ydCBsb2dnZXIKaW1wb3J0IGNvbmZpZwpmcm9tIGlvIGltcG9ydCBCeXRlc0lPCmltcG9ydCBwYW5kYXMgYXMgcGQKCiMjIyMjIyMjIyMjIyBSRVFVSVJFTUVOVFMgIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBzdWRvIGFwdC1nZXQgaW5zdGFsbCBsaWJwcS1kZXYKIyBzdWRvIHBpcCBpbnN0YWxsIHBzeWNvcGcyCiMgc3VkbyBwaXAgaW5zdGFsbCBzcWxhbGNoZW15CiMgc3VkbyBwaXAgaW5zdGFsbCBzcWxhbGNoZW15LXJlZHNoaWZ0CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCgpkZWYgZ2V0X3JlZHNoaWZ0X3NlY3JldCgpOgogICAgIyBzZWNyZXRfbmFtZSA9ICJjb25uZWN0aW9uLXRuLXJlZHNoaWZ0LXR2by9tdGEiCiAgICAjIHJlZ2lvbl9uYW1lID0gInVzLXdlc3QtMiIKCiAgICAjIGNvbm5lY3RzIHRvIEFXUyBzZWNyZXRzIG1hbmFnZXIgdG8gZ2V0IGNyZWRlbnRpYWxzCiAgICBzZXNzaW9uID0gYm90bzMuc2Vzc2lvbi5TZXNzaW9uKCkKICAgIGNsaWVudCA9IHNlc3Npb24uY2xpZW50KAogICAgICAgIHNlcnZpY2VfbmFtZT0nc2VjcmV0c21hbmFnZXInLCByZWdpb25fbmFtZT1jb25maWcuUkVHSU9OX05BTUUsCiAgICAgICAgICAgIGF3c19hY2Nlc3Nfa2V5X2lkPWNvbmZpZy5BV1NfQUNDRVNTX0tFWV9JRCwKICAgICAgICAgICAgYXdzX3NlY3JldF9hY2Nlc3Nfa2V5PWNvbmZpZy5BV1NfU0VDUkVUX0FDQ0VTU19LRVkpCgogICAgdHJ5OgogICAgICAgIGdldF9zZWNyZXRfdmFsdWVfcmVzcG9uc2UgPSBjbGllbnQuZ2V0X3NlY3JldF92YWx1ZSgKICAgICAgICAgICAgU2VjcmV0SWQ9Y29uZmlnLlNFQ1JFVF9OQU1FKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHJhaXNlIGUKICAgIGVsc2U6CiAgICAgICAgaWYgJ1NlY3JldFN0cmluZycgaW4gZ2V0X3NlY3JldF92YWx1ZV9yZXNwb25zZToKICAgICAgICAgICAgc2VjcmV0ID0gZ2V0X3NlY3JldF92YWx1ZV9yZXNwb25zZVsnU2VjcmV0U3RyaW5nJ10KICAgICAgICBlbHNlOgogICAgICAgICAgICBkZWNvZGVkX2JpbmFyeV9zZWNyZXQgPSBiYXNlNjQuYjY0ZGVjb2RlKAogICAgICAgICAgICAgICAgZ2V0X3NlY3JldF92YWx1ZV9yZXNwb25zZVsnU2VjcmV0QmluYXJ5J10pCiAgICByZXR1cm4ganNvbi5sb2FkcyhzZWNyZXQpCgoKZGVmIGdldF9yZWRzaGlmdF9jb25uZWN0aW9uKCk6CiAgICAjIGNyZWF0ZXMgZGF0YSBiYXNlIGNvbm5lY3Rpb24gYW5kIHBhc3NlcyBpdCBiYWNrIHRvIGNhbGxlcgogICAgdHJ5OgogICAgICAgIGxvZ2dlci5pbmZvKCcoY29ubmVjdGlvbnNfYXdzLmdldF9yZWRzaGlmdF9jb25uZWN0aW9uKSBHZXR0aW5nIERhdGFiYXNlIENvbm5lY3Rpb24nKQogICAgICAgIHNlY3JldHMgPSBnZXRfcmVkc2hpZnRfc2VjcmV0KCkKICAgICAgICBjb25uID0gcHN5Y29wZzIuY29ubmVjdChkYm5hbWU9c2VjcmV0c1snREFUQUJBU0UnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0PXNlY3JldHNbJ0hPU1QnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3J0PXNlY3JldHNbJ1BPUlQnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyPXNlY3JldHNbJ1VTRVInXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZD1zZWNyZXRzWydQQVNTV09SRCddKQogICAgICAgIHJldHVybiBjb25uCgogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGxvZ2dlci5lcnJvcihmJ0Vycm9yIGdldHRpbmcgY29ubmVjdGlvbiBkZXRhaWxzOiBMaW5lOiB7Zm9ybWF0KGV4Y19pbmZvKClbLTFdLnRiX2xpbmVubyl9OiB7ZX0nKQogICAgICAgICMgc3lzLmV4aXQoMSkKICAgICAgICByYWlzZSBFeGNlcHRpb24oZidFcnJvciBnZXR0aW5nIGNvbm5lY3Rpb24gZGV0YWlsczogTGluZToge2Zvcm1hdChleGNfaW5mbygpWy0xXS50Yl9saW5lbm8pfToge2V9JykKCgpkZWYgZ2V0X2F0aGVuYV9jb25uZWN0aW9uKCk6CiAgICBhdGhlbmFfY2xpZW50ID0gYm90bzMuY2xpZW50KAogICAgICAgICdhdGhlbmEnLCAKICAgICAgICByZWdpb25fbmFtZT1jb25maWcuUkVHSU9OX05BTUUsIAogICAgICAgIGF3c19hY2Nlc3Nfa2V5X2lkPWNvbmZpZy5BV1NfQUNDRVNTX0tFWV9JRCwgCiAgICAgICAgYXdzX3NlY3JldF9hY2Nlc3Nfa2V5PWNvbmZpZy5BV1NfU0VDUkVUX0FDQ0VTU19LRVkKICAgICkKICAgIHJldHVybiBhdGhlbmFfY2xpZW50CgoKZGVmIHJ1bl9hdGhlbmFfcXVlcnkocXVlcnkpOgogICAgCiAgICBsb2dnZXIuaW5mbyhmJ1N0YXJ0aW5nIEF0aGVuYSBxdWVyeSBleGVjdXRpb24nKQogICAgbG9nZ2VyLmluZm8oZidBdGhlbmEgcXVlcnk6XG57cXVlcnl9JykKICAgIHJlc3BvbnNlID0gY29uZmlnLkFUSEVOQV9DTElFTlQuc3RhcnRfcXVlcnlfZXhlY3V0aW9uKAogICAgICAgIFF1ZXJ5U3RyaW5nPXF1ZXJ5LAogICAgICAgIFF1ZXJ5RXhlY3V0aW9uQ29udGV4dD17J0RhdGFiYXNlJzogY29uZmlnLkFUSEVOQV9EQVRBQkFTRX0sCiAgICAgICAgUmVzdWx0Q29uZmlndXJhdGlvbj17J091dHB1dExvY2F0aW9uJzogY29uZmlnLkFUSEVOQV9TVEFUVVNfT1VUUFVUX0xPQ0FUSU9OfSwKICAgICAgICBXb3JrR3JvdXA9J2p1aWNlX2RhdGEnCiAgICApCiAgICAKICAgICMgR2V0IHRoZSBxdWVyeSBleGVjdXRpb24gSUQKICAgIHF1ZXJ5X2V4ZWN1dGlvbl9pZCA9IHJlc3BvbnNlWydRdWVyeUV4ZWN1dGlvbklkJ10KCiAgICAjIFdhaXQgZm9yIHRoZSBxdWVyeSB0byBjb21wbGV0ZQogICAgd2hpbGUgVHJ1ZToKICAgICAgICBxdWVyeV9zdGF0dXMgPSBjb25maWcuQVRIRU5BX0NMSUVOVC5nZXRfcXVlcnlfZXhlY3V0aW9uKFF1ZXJ5RXhlY3V0aW9uSWQ9cXVlcnlfZXhlY3V0aW9uX2lkKQogICAgICAgIHN0YXR1cyA9IHF1ZXJ5X3N0YXR1c1snUXVlcnlFeGVjdXRpb24nXVsnU3RhdHVzJ11bJ1N0YXRlJ10KCiAgICAgICAgaWYgc3RhdHVzIGluIFsnU1VDQ0VFREVEJywgJ0ZBSUxFRCcsICdDQU5DRUxMRUQnXToKICAgICAgICAgICAgYnJlYWsKCiAgICAjIFJldHJpZXZlIGFuZCByZXR1cm4gdGhlIHF1ZXJ5IHJlc3VsdHMgaWYgdGhlIHF1ZXJ5IHN1Y2NlZWRlZAogICAgaWYgc3RhdHVzID09ICdTVUNDRUVERUQnOgojICAgICAgICAgcmVzdWx0cyA9IEFUSEVOQV9DTElFTlQuZ2V0X3F1ZXJ5X3Jlc3VsdHMoUXVlcnlFeGVjdXRpb25JZD1xdWVyeV9leGVjdXRpb25faWQpCiMgICAgICAgICByZXN1bHRzID0gZm9ybWF0X2F0aGVuYV9yZXN1bHRzKHJlc3VsdHMpCiAgICAgICAgczNfcmVzcG9uc2Vfb2JqZWN0ID0gY29uZmlnLlMzLmdldF9vYmplY3QoQnVja2V0PWNvbmZpZy5RVUVSWV9CVUNLRVQsIEtleT1mIntjb25maWcuQVRIRU5BX1NUQVRVU19PVVRQVVRfTE9DQVRJT04uc3BsaXQoJy8nKVstMl19L3txdWVyeV9leGVjdXRpb25faWR9LmNzdiIpCiAgICAgICAgb2JqZWN0X2NvbnRlbnQgPSBzM19yZXNwb25zZV9vYmplY3RbJ0JvZHknXS5yZWFkKCkKICAgICAgICByZXN1bHRzID0gcGQucmVhZF9jc3YoQnl0ZXNJTyhvYmplY3RfY29udGVudCkpCiAgICAgICAgbG9nZ2VyLmluZm8oZidBdGhlbmEgcXVlcnkgcmFuIHN1Y2Nlc3NmdWxseScpCiAgICAgICAgcmV0dXJuIHJlc3VsdHMKICAgIGVsaWYgc3RhdHVzID09ICdGQUlMRUQnOgogICAgICAgIHJhaXNlIEV4Y2VwdGlvbignUXVlcnkgZnJvbSBBdGhlbmEgZmFpbGVkJykKICAgIAoKZGVmIGNsb3NlX2Nvbm5lY3Rpb25zKCk6CgogICAgY29uZmlnLlJFRFNISUZUX0NPTk4uY2xvc2UoKQogICAgIyBjb25maWcuUzMuY2xvc2UoKQogICAgIyBjb25maWcuQVRIRU5BX0NMSUVOVC5jbG9zZSgpCiAgICBsb2dnZXIuZGVidWcoZidDbG9zZWQgYWxsIGNvbm5lY3Rpb25zJyk=\\\\\\\",\\\\\\\"4849689\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"4849687\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"4849688\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"4849690\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"sandboxService\\\":[],\\\"notebookContent\\\":\\\"{\\\\\\\"nbformat_minor\\\\\\\":2,\\\\\\\"metadata\\\\\\\":{},\\\\\\\"cells\\\\\\\":[{\\\\\\\"outputs\\\\\\\":[],\\\\\\\"metadata\\\\\\\":{\\\\\\\"id\\\\\\\":\\\\\\\"5308491_0.013167704862612872\\\\\\\"},\\\\\\\"execution_count\\\\\\\":3,\\\\\\\"source\\\\\\\":[\\\\\\\"from datetime import datetime, timedelta\\\\\\\\nimport json\\\\\\\\nimport logging\\\\\\\\nlogging.basicConfig()\\\\\\\\nlogger = logging.getLogger('TVO_INPUT')\\\\\\\\nlogger.setLevel(logging.INFO)\\\\\\\\n\\\\\\\\nimport boto3\\\\\\\\nimport pandas as pd\\\\\\\\nimport psycopg2\\\\\\\\nfrom io import BytesIO\\\\\\\\nimport base64\\\\\\\\n\\\\\\\\ndef get_redshift_secret():\\\\\\\\n    global AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, REGION_NAME, SECRET_NAME\\\\\\\\n    # connects to AWS secrets manager to get credentials\\\\\\\\n    session = boto3.session.Session()\\\\\\\\n    \\\\\\\\n    client = session.client(\\\\\\\\n        service_name='secretsmanager', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\\\\\\\\n\\\\\\\\n    try:\\\\\\\\n        get_secret_value_response = client.get_secret_value(SecretId=SECRET_NAME)\\\\\\\\n    except Exception as e:\\\\\\\\n        logger.error(\\\\\\\\\\\\\\\"ERROR in getting redshift secrets\\\\\\\\\\\\\\\")\\\\\\\\n        raise\\\\\\\\n    else:\\\\\\\\n        if 'SecretString' in get_secret_value_response:\\\\\\\\n            secret = get_secret_value_response['SecretString']\\\\\\\\n        else:\\\\\\\\n            decoded_binary_secret = base64.b64decode(\\\\\\\\n                get_secret_value_response['SecretBinary'])\\\\\\\\n    return json.loads(secret)\\\\\\\\n\\\\\\\\ndef get_redshift_connection():\\\\\\\\n    # creates data base connection and passes it back to caller\\\\\\\\n    try:\\\\\\\\n        secrets = get_redshift_secret()\\\\\\\\n        conn = psycopg2.connect(dbname=secrets['DATABASE'],\\\\\\\\n                                host=secrets['HOST'],\\\\\\\\n                                port=secrets['PORT'],\\\\\\\\n                                user=secrets['USER'],\\\\\\\\n                                password=secrets['PASSWORD'])\\\\\\\\n        return conn\\\\\\\\n\\\\\\\\n    except Exception as e:\\\\\\\\n        logger.error(f'Error getting redshift connection details: Exception: {str(e)}')\\\\\\\\n        raise\\\\\\\\n        \\\\\\\\ndef run_redshift_query(redshift_query):\\\\\\\\n    conn = get_redshift_connection()\\\\\\\\n    df = pd.read_sql_query(redshift_query, con=conn)\\\\\\\\n    return df\\\\\\\\n\\\\\\\\ndef run_athena_query(query):\\\\\\\\n    global REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, ATHENA_DATABASE, ATHENA_TABLE, ATHENA_STATUS_OUTPUT_LOCATION, QUERY_BUCKET\\\\\\\\n    \\\\\\\\n    ATHENA_CLIENT = boto3.client('athena', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\\\\\\\\n    S3 = boto3.client('s3', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\\\\\\\\n    logger.info(f'Starting Athena query execution')\\\\\\\\n    logger.info(f'Athena query:\\\\\\\\\\\\\\\\n{query}')\\\\\\\\n    response = ATHENA_CLIENT.start_query_execution(\\\\\\\\n        QueryString=query,\\\\\\\\n        QueryExecutionContext={'Database': ATHENA_DATABASE},\\\\\\\\n        ResultConfiguration={'OutputLocation': ATHENA_STATUS_OUTPUT_LOCATION},\\\\\\\\n        WorkGroup='juice_data'\\\\\\\\n    )\\\\\\\\n    \\\\\\\\n    # Get the query execution ID\\\\\\\\n    query_execution_id = response['QueryExecutionId']\\\\\\\\n\\\\\\\\n    # Wait for the query to complete\\\\\\\\n    while True:\\\\\\\\n        query_status = ATHENA_CLIENT.get_query_execution(QueryExecutionId=query_execution_id)\\\\\\\\n        status = query_status['QueryExecution']['Status']['State']\\\\\\\\n\\\\\\\\n        if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:\\\\\\\\n            break\\\\\\\\n\\\\\\\\n    # Retrieve and return the query results if the query succeeded\\\\\\\\n    if status == 'SUCCEEDED':\\\\\\\\n        s3_response_object = S3.get_object(Bucket=QUERY_BUCKET, Key=f\\\\\\\\\\\\\\\"{ATHENA_STATUS_OUTPUT_LOCATION.split('/')[-2]}/{query_execution_id}.csv\\\\\\\\\\\\\\\")\\\\\\\\n        object_content = s3_response_object['Body'].read()\\\\\\\\n        results = pd.read_csv(BytesIO(object_content))\\\\\\\\n        logger.info(f'Athena query ran successfully')\\\\\\\\n        return results\\\\\\\\n    elif status == 'FAILED':\\\\\\\\n        raise Exception('Query from Athena failed')\\\\\\\\n\\\\\\\\ndef client_modification(row):\\\\\\\\n    if row.lower().strip() == 'bbb':\\\\\\\\n        return 'overstock'\\\\\\\\n    elif row.lower() == 'rexmd' or row.lower() == 'singlecare':\\\\\\\\n        return 'rxsense'\\\\\\\\n    else:\\\\\\\\n        return row.lower()\\\\\\\\n        \\\\\\\\ndef prepare_data(data, lookback_days, opt_penalty_station,\\\\\\\\n                   opt_penalty_daypart, opt_penalty_bucket, opt_penalty_variance, opt_max_seconds, branch):\\\\\\\\n    global ATHENA_DATABASE, ATHENA_TABLE\\\\\\\\n    \\\\\\\\n    input_df = pd.DataFrame(columns=['kpi_index', 'lookbefore_mins', 'lookafter_mins', 'include_freespots',\\\\\\\\n       'include_impressions', 'opt_penalty_station', 'opt_penalty_daypart',\\\\\\\\n       'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds',\\\\\\\\n       'branch', 'start_date', 'end_date', 'clientkey'])\\\\\\\\n    \\\\\\\\n    redshift_query = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        select distinct c.clientkey_map, k.tvo_kpi_index, c.tvo_pre_window_minutes, c.tvo_post_window_minutes, c.tvo_include_freespots, c.tvo_include_impressions, c.dataset_start_date, c.dataset_end_date\\\\\\\\n        from portal_global_settings.client_mappings c, portal_global_settings.kpi_mappings k\\\\\\\\n        where c.clientkey_map = k.clientkey_map\\\\\\\\n        order by clientkey_map, tvo_kpi_index\\\\\\\\n        \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n    \\\\\\\\n    for end_date_string in data[\\\\\\\\\\\\\\\"end_dates\\\\\\\\\\\\\\\"]:\\\\\\\\n        \\\\\\\\n        # Getting redshift results\\\\\\\\n        start_date = \\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\"\\\\\\\\n        end_dt = datetime(year=int(end_date_string.split(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")[0]), month=int(end_date_string.split(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")[1]), day=int(end_date_string.split(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")[2]), hour=0)\\\\\\\\n        prev_day = end_dt - timedelta(1)\\\\\\\\n        end_date = f'{prev_day.year}-{str(\\\\\\\\\\\\\\\"{:02d}\\\\\\\\\\\\\\\".format(prev_day.month))}-{str(\\\\\\\\\\\\\\\"{:02d}\\\\\\\\\\\\\\\".format(prev_day.day))}'\\\\\\\\n        redshift_df = run_redshift_query(redshift_query)\\\\\\\\n        redshift_df = redshift_df.drop(columns=['dataset_start_date','dataset_end_date'])\\\\\\\\n        redshift_df[['opt_penalty_station', 'opt_penalty_daypart', 'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds', 'branch', 'start_date', 'end_date']] = pd.DataFrame([[opt_penalty_station, opt_penalty_daypart, opt_penalty_bucket, opt_penalty_variance, opt_max_seconds, branch, start_date, end_date]], index=redshift_df.index)\\\\\\\\n        redshift_df = redshift_df.rename(columns = {'clientkey_map':'clientkey',\\\\\\\\n                                                 'tvo_kpi_index':'kpi_index',\\\\\\\\n                                                'tvo_pre_window_minutes':'lookbefore_mins',\\\\\\\\n                                                'tvo_post_window_minutes':'lookafter_mins',\\\\\\\\n                                                'tvo_include_freespots':'include_freespots',\\\\\\\\n                                                'tvo_include_impressions':'include_impressions'\\\\\\\\n                                                })\\\\\\\\n\\\\\\\\n        \\\\\\\\n        # Querying athena to get list of clients active in the past week\\\\\\\\n        dt = (datetime.strptime(end_date_string, '%Y-%m-%d'))\\\\\\\\n        end_check_date = dt.strftime(\\\\\\\\\\\\\\\"%Y-%m-%d\\\\\\\\\\\\\\\")\\\\\\\\n        dt_7 = dt - timedelta(days=lookback_days)\\\\\\\\n        start_check_date = dt_7.strftime(\\\\\\\\\\\\\\\"%Y-%m-%d\\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\\\n        athena_query = f\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        select advertiser, count(*) as row_count from \\\\\\\\n        (select distinct * from {ATHENA_DATABASE}.{ATHENA_TABLE})\\\\\\\\n        where cast(broadcast_date as date) between cast('{str(start_check_date)}' as date) and cast('{str(end_check_date)}' as date)\\\\\\\\n        group by advertiser\\\\\\\\n        \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        athena_df = run_athena_query(athena_query)\\\\\\\\n        active_client_list = athena_df[athena_df['row_count']>0]['advertiser'].to_list()\\\\\\\\n        active_client_list = [i.lower().strip() for i in active_client_list]\\\\\\\\n        active_list_df = pd.DataFrame({'client_orig':active_client_list})\\\\\\\\n        active_list_df['client_mod'] = active_list_df['client_orig'].apply(client_modification)\\\\\\\\n        \\\\\\\\n        # Merging client list with configurations from redshift\\\\\\\\n        final_df = redshift_df.set_index('clientkey').merge(active_list_df.set_index('client_mod'), left_on='clientkey', right_on='client_mod')\\\\\\\\n        final_df = final_df.rename(columns={'client_orig':'clientkey'})\\\\\\\\n        final_df = final_df.dropna()\\\\\\\\n        input_df = pd.concat([input_df,final_df])\\\\\\\\n    input_df = input_df.sort_values(['end_date','clientkey','kpi_index'])\\\\\\\\n    return input_df\\\\\\\\n\\\\\\\\ndef start_func(data, secret_name, region_name, athena_database, aws_access_key_id,\\\\\\\\n                aws_secret_access_key, athena_status_output_location, query_bucket,\\\\\\\\n                  athena_table, branch, lookback_days=7, opt_penalty_station=1,\\\\\\\\n                   opt_penalty_daypart=1, opt_penalty_bucket=1, opt_penalty_variance=1, opt_max_seconds=60):\\\\\\\\n     \\\\\\\\n    global AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, REGION_NAME, SECRET_NAME, conn, cursor, ATHENA_DATABASE, ATHENA_TABLE, ATHENA_STATUS_OUTPUT_LOCATION, QUERY_BUCKET\\\\\\\\n    AWS_ACCESS_KEY_ID = aws_access_key_id\\\\\\\\n    AWS_SECRET_ACCESS_KEY = aws_secret_access_key\\\\\\\\n    REGION_NAME = region_name\\\\\\\\n    SECRET_NAME = secret_name\\\\\\\\n    ATHENA_DATABASE = athena_database\\\\\\\\n    ATHENA_TABLE = athena_table\\\\\\\\n    ATHENA_STATUS_OUTPUT_LOCATION = athena_status_output_location\\\\\\\\n    QUERY_BUCKET = query_bucket\\\\\\\\n    \\\\\\\\n    result_df = pd.DataFrame(columns=['kpi_index', 'lookbefore_mins', 'lookafter_mins', 'include_freespots',\\\\\\\\n       'include_impressions', 'opt_penalty_station', 'opt_penalty_daypart',\\\\\\\\n       'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds',\\\\\\\\n       'branch', 'start_date', 'end_date', 'clientkey'])\\\\\\\\n    \\\\\\\\n    results = prepare_data(data[0], int(lookback_days), int(opt_penalty_station),\\\\\\\\n               int(opt_penalty_daypart), int(opt_penalty_bucket), int(opt_penalty_variance), int(opt_max_seconds), branch)\\\\\\\\n        \\\\\\\\n    return results\\\\\\\"],\\\\\\\"cell_type\\\\\\\":\\\\\\\"code\\\\\\\"}],\\\\\\\"nbformat\\\\\\\":4}\\\",\\\"secrets\\\":\\\"{\\\\\\\"reserv1\\\\\\\":null,\\\\\\\"reserv2\\\\\\\":null,\\\\\\\"reserv3\\\\\\\":null,\\\\\\\"reserv4\\\\\\\":null,\\\\\\\"reserv5\\\\\\\":null,\\\\\\\"createdDate\\\\\\\":null,\\\\\\\"isActive\\\\\\\":0,\\\\\\\"lastUpdatedDate\\\\\\\":null,\\\\\\\"active\\\\\\\":1,\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":2162688,\\\\\\\"type\\\\\\\":\\\\\\\"210\\\\\\\",\\\\\\\"status\\\\\\\":1,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"settings\\\\\\\":\\\\\\\"[{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"AWS\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"ACCESS_KEY_ID_BDB\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"SECRET_KEY_BDB\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"REGION\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"NAME\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"PROD\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"BUCKET\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"QUERY\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"RESULTS\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"SOURCE\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"BUCKET\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"BDB\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"BUCKET\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"ATHENA\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"DATABASE\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"ATTRIBUTION\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"BUCKET\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"CLIENT\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"UPLOADS_BUCKET\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"REDSHIFT\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"MTA_SECRET_NAME\\\\\\\\\\\\\\\"]},{\\\\\\\\\\\\\\\"secretkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"WURFL\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"secretDetails\\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\\"BUCKET\\\\\\\\\\\\\\\"]}]\\\\\\\"}\\\",\\\"dataSource\\\":[],\\\"notebook\\\":\\\"{\\\\\\\"migrationId\\\\\\\":null,\\\\\\\"id\\\\\\\":5308500,\\\\\\\"projectId\\\\\\\":4751365,\\\\\\\"spaceKey\\\\\\\":\\\\\\\"1111\\\\\\\",\\\\\\\"notebookName\\\\\\\":\\\\\\\"tvo2_input_backfill\\\\\\\",\\\\\\\"data\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"datasets\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"uncheckeddatasets\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\":[{\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5308491_0.013167704862612872\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"from datetime import datetime, timedelta\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\nimport logging\\\\\\\\\\\\\\\\nlogging.basicConfig()\\\\\\\\\\\\\\\\nlogger = logging.getLogger('TVO_INPUT')\\\\\\\\\\\\\\\\nlogger.setLevel(logging.INFO)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nimport boto3\\\\\\\\\\\\\\\\nimport pandas as pd\\\\\\\\\\\\\\\\nimport psycopg2\\\\\\\\\\\\\\\\nfrom io import BytesIO\\\\\\\\\\\\\\\\nimport base64\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef get_redshift_secret():\\\\\\\\\\\\\\\\n    global AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, REGION_NAME, SECRET_NAME\\\\\\\\\\\\\\\\n    # connects to AWS secrets manager to get credentials\\\\\\\\\\\\\\\\n    session = boto3.session.Session()\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    client = session.client(\\\\\\\\\\\\\\\\n        service_name='secretsmanager', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\n        get_secret_value_response = client.get_secret_value(SecretId=SECRET_NAME)\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\n        logger.error(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR in getting redshift secrets\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n        raise\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\n        if 'SecretString' in get_secret_value_response:\\\\\\\\\\\\\\\\n            secret = get_secret_value_response['SecretString']\\\\\\\\\\\\\\\\n        else:\\\\\\\\\\\\\\\\n            decoded_binary_secret = base64.b64decode(\\\\\\\\\\\\\\\\n                get_secret_value_response['SecretBinary'])\\\\\\\\\\\\\\\\n    return json.loads(secret)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef get_redshift_connection():\\\\\\\\\\\\\\\\n    # creates data base connection and passes it back to caller\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\n        secrets = get_redshift_secret()\\\\\\\\\\\\\\\\n        conn = psycopg2.connect(dbname=secrets['DATABASE'],\\\\\\\\\\\\\\\\n                                host=secrets['HOST'],\\\\\\\\\\\\\\\\n                                port=secrets['PORT'],\\\\\\\\\\\\\\\\n                                user=secrets['USER'],\\\\\\\\\\\\\\\\n                                password=secrets['PASSWORD'])\\\\\\\\\\\\\\\\n        return conn\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\n        logger.error(f'Error getting redshift connection details: Exception: {str(e)}')\\\\\\\\\\\\\\\\n        raise\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\ndef run_redshift_query(redshift_query):\\\\\\\\\\\\\\\\n    conn = get_redshift_connection()\\\\\\\\\\\\\\\\n    df = pd.read_sql_query(redshift_query, con=conn)\\\\\\\\\\\\\\\\n    return df\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef run_athena_query(query):\\\\\\\\\\\\\\\\n    global REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, ATHENA_DATABASE, ATHENA_TABLE, ATHENA_STATUS_OUTPUT_LOCATION, QUERY_BUCKET\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    ATHENA_CLIENT = boto3.client('athena', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\\\\\\\\\\\\\\\\n    S3 = boto3.client('s3', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\\\\\\\\\\\\\\\\n    logger.info(f'Starting Athena query execution')\\\\\\\\\\\\\\\\n    logger.info(f'Athena query:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{query}')\\\\\\\\\\\\\\\\n    response = ATHENA_CLIENT.start_query_execution(\\\\\\\\\\\\\\\\n        QueryString=query,\\\\\\\\\\\\\\\\n        QueryExecutionContext={'Database': ATHENA_DATABASE},\\\\\\\\\\\\\\\\n        ResultConfiguration={'OutputLocation': ATHENA_STATUS_OUTPUT_LOCATION},\\\\\\\\\\\\\\\\n        WorkGroup='juice_data'\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    # Get the query execution ID\\\\\\\\\\\\\\\\n    query_execution_id = response['QueryExecutionId']\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    # Wait for the query to complete\\\\\\\\\\\\\\\\n    while True:\\\\\\\\\\\\\\\\n        query_status = ATHENA_CLIENT.get_query_execution(QueryExecutionId=query_execution_id)\\\\\\\\\\\\\\\\n        status = query_status['QueryExecution']['Status']['State']\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:\\\\\\\\\\\\\\\\n            break\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    # Retrieve and return the query results if the query succeeded\\\\\\\\\\\\\\\\n    if status == 'SUCCEEDED':\\\\\\\\\\\\\\\\n        s3_response_object = S3.get_object(Bucket=QUERY_BUCKET, Key=f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{ATHENA_STATUS_OUTPUT_LOCATION.split('/')[-2]}/{query_execution_id}.csv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n        object_content = s3_response_object['Body'].read()\\\\\\\\\\\\\\\\n        results = pd.read_csv(BytesIO(object_content))\\\\\\\\\\\\\\\\n        logger.info(f'Athena query ran successfully')\\\\\\\\\\\\\\\\n        return results\\\\\\\\\\\\\\\\n    elif status == 'FAILED':\\\\\\\\\\\\\\\\n        raise Exception('Query from Athena failed')\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef client_modification(row):\\\\\\\\\\\\\\\\n    if row.lower().strip() == 'bbb':\\\\\\\\\\\\\\\\n        return 'overstock'\\\\\\\\\\\\\\\\n    elif row.lower() == 'rexmd' or row.lower() == 'singlecare':\\\\\\\\\\\\\\\\n        return 'rxsense'\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\n        return row.lower()\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\ndef prepare_data(data, lookback_days, opt_penalty_station,\\\\\\\\\\\\\\\\n                   opt_penalty_daypart, opt_penalty_bucket, opt_penalty_variance, opt_max_seconds, branch):\\\\\\\\\\\\\\\\n    global ATHENA_DATABASE, ATHENA_TABLE\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    input_df = pd.DataFrame(columns=['kpi_index', 'lookbefore_mins', 'lookafter_mins', 'include_freespots',\\\\\\\\\\\\\\\\n       'include_impressions', 'opt_penalty_station', 'opt_penalty_daypart',\\\\\\\\\\\\\\\\n       'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds',\\\\\\\\\\\\\\\\n       'branch', 'start_date', 'end_date', 'clientkey'])\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    redshift_query = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n        select distinct c.clientkey_map, k.tvo_kpi_index, c.tvo_pre_window_minutes, c.tvo_post_window_minutes, c.tvo_include_freespots, c.tvo_include_impressions, c.dataset_start_date, c.dataset_end_date\\\\\\\\\\\\\\\\n        from portal_global_settings.client_mappings c, portal_global_settings.kpi_mappings k\\\\\\\\\\\\\\\\n        where c.clientkey_map = k.clientkey_map\\\\\\\\\\\\\\\\n        order by clientkey_map, tvo_kpi_index\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    for end_date_string in data[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"end_dates\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]:\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n        # Getting redshift results\\\\\\\\\\\\\\\\n        start_date = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n        end_dt = datetime(year=int(end_date_string.split(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")[0]), month=int(end_date_string.split(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")[1]), day=int(end_date_string.split(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")[2]), hour=0)\\\\\\\\\\\\\\\\n        prev_day = end_dt - timedelta(1)\\\\\\\\\\\\\\\\n        end_date = f'{prev_day.year}-{str(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{:02d}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(prev_day.month))}-{str(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{:02d}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(prev_day.day))}'\\\\\\\\\\\\\\\\n        redshift_df = run_redshift_query(redshift_query)\\\\\\\\\\\\\\\\n        redshift_df = redshift_df.drop(columns=['dataset_start_date','dataset_end_date'])\\\\\\\\\\\\\\\\n        redshift_df[['opt_penalty_station', 'opt_penalty_daypart', 'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds', 'branch', 'start_date', 'end_date']] = pd.DataFrame([[opt_penalty_station, opt_penalty_daypart, opt_penalty_bucket, opt_penalty_variance, opt_max_seconds, branch, start_date, end_date]], index=redshift_df.index)\\\\\\\\\\\\\\\\n        redshift_df = redshift_df.rename(columns = {'clientkey_map':'clientkey',\\\\\\\\\\\\\\\\n                                                 'tvo_kpi_index':'kpi_index',\\\\\\\\\\\\\\\\n                                                'tvo_pre_window_minutes':'lookbefore_mins',\\\\\\\\\\\\\\\\n                                                'tvo_post_window_minutes':'lookafter_mins',\\\\\\\\\\\\\\\\n                                                'tvo_include_freespots':'include_freespots',\\\\\\\\\\\\\\\\n                                                'tvo_include_impressions':'include_impressions'\\\\\\\\\\\\\\\\n                                                })\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n        # Querying athena to get list of clients active in the past week\\\\\\\\\\\\\\\\n        dt = (datetime.strptime(end_date_string, '%Y-%m-%d'))\\\\\\\\\\\\\\\\n        end_check_date = dt.strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n        dt_7 = dt - timedelta(days=lookback_days)\\\\\\\\\\\\\\\\n        start_check_date = dt_7.strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        athena_query = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n        select advertiser, count(*) as row_count from \\\\\\\\\\\\\\\\n        (select distinct * from {ATHENA_DATABASE}.{ATHENA_TABLE})\\\\\\\\\\\\\\\\n        where cast(broadcast_date as date) between cast('{str(start_check_date)}' as date) and cast('{str(end_check_date)}' as date)\\\\\\\\\\\\\\\\n        group by advertiser\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n        athena_df = run_athena_query(athena_query)\\\\\\\\\\\\\\\\n        active_client_list = athena_df[athena_df['row_count']>0]['advertiser'].to_list()\\\\\\\\\\\\\\\\n        active_client_list = [i.lower().strip() for i in active_client_list]\\\\\\\\\\\\\\\\n        active_list_df = pd.DataFrame({'client_orig':active_client_list})\\\\\\\\\\\\\\\\n        active_list_df['client_mod'] = active_list_df['client_orig'].apply(client_modification)\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n        # Merging client list with configurations from redshift\\\\\\\\\\\\\\\\n        final_df = redshift_df.set_index('clientkey').merge(active_list_df.set_index('client_mod'), left_on='clientkey', right_on='client_mod')\\\\\\\\\\\\\\\\n        final_df = final_df.rename(columns={'client_orig':'clientkey'})\\\\\\\\\\\\\\\\n        final_df = final_df.dropna()\\\\\\\\\\\\\\\\n        input_df = pd.concat([input_df,final_df])\\\\\\\\\\\\\\\\n    input_df = input_df.sort_values(['end_date','clientkey','kpi_index'])\\\\\\\\\\\\\\\\n    return input_df\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef start_func(data, secret_name, region_name, athena_database, aws_access_key_id,\\\\\\\\\\\\\\\\n                aws_secret_access_key, athena_status_output_location, query_bucket,\\\\\\\\\\\\\\\\n                  athena_table, branch, lookback_days=7, opt_penalty_station=1,\\\\\\\\\\\\\\\\n                   opt_penalty_daypart=1, opt_penalty_bucket=1, opt_penalty_variance=1, opt_max_seconds=60):\\\\\\\\\\\\\\\\n     \\\\\\\\\\\\\\\\n    global AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, REGION_NAME, SECRET_NAME, conn, cursor, ATHENA_DATABASE, ATHENA_TABLE, ATHENA_STATUS_OUTPUT_LOCATION, QUERY_BUCKET\\\\\\\\\\\\\\\\n    AWS_ACCESS_KEY_ID = aws_access_key_id\\\\\\\\\\\\\\\\n    AWS_SECRET_ACCESS_KEY = aws_secret_access_key\\\\\\\\\\\\\\\\n    REGION_NAME = region_name\\\\\\\\\\\\\\\\n    SECRET_NAME = secret_name\\\\\\\\\\\\\\\\n    ATHENA_DATABASE = athena_database\\\\\\\\\\\\\\\\n    ATHENA_TABLE = athena_table\\\\\\\\\\\\\\\\n    ATHENA_STATUS_OUTPUT_LOCATION = athena_status_output_location\\\\\\\\\\\\\\\\n    QUERY_BUCKET = query_bucket\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    result_df = pd.DataFrame(columns=['kpi_index', 'lookbefore_mins', 'lookafter_mins', 'include_freespots',\\\\\\\\\\\\\\\\n       'include_impressions', 'opt_penalty_station', 'opt_penalty_daypart',\\\\\\\\\\\\\\\\n       'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds',\\\\\\\\\\\\\\\\n       'branch', 'start_date', 'end_date', 'clientkey'])\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\n    results = prepare_data(data[0], int(lookback_days), int(opt_penalty_station),\\\\\\\\\\\\\\\\n               int(opt_penalty_daypart), int(opt_penalty_bucket), int(opt_penalty_variance), int(opt_max_seconds), branch)\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n    return results\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"count\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"mode\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"hover\\\\\\\\\\\\\\\":true,\\\\\\\\\\\\\\\"interrupt\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"warning\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"outputArray\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"lineNumber\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"laodmodel\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"pre_cell_id\\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\\"is_pre_cell\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"succORerr\\\\\\\\\\\\\\\":true,\\\\\\\\\\\\\\\"expand\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"outputexpand\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"readonly\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"markDowns\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"result\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"algorithms\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"semicolon\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"cputimes\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"showcputime\\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\\"secret\\\\\\\\\\\\\\\":[]}],\\\\\\\\\\\\\\\"kernalID\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"4ca79944-9bbc-47ee-ba50-ef03c873d912\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Algorithms\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"isScheduled\\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\\"filename\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"tvo2_input_backfill.ipynb\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"last_modified_date\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2023-11-21T15:09:19.000+00:00\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"description\\\\\\\":null,\\\\\\\"createdDate\\\\\\\":1700493597045,\\\\\\\"lastUpdatedDate\\\\\\\":1700581565071,\\\\\\\"createdBy\\\\\\\":4030470,\\\\\\\"updatedBy\\\\\\\":4030470,\\\\\\\"status\\\\\\\":1,\\\\\\\"committedBy\\\\\\\":4030470,\\\\\\\"lastcommittedDate\\\\\\\":1700493597045,\\\\\\\"isShared\\\\\\\":null,\\\\\\\"customComponentscript\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"DSLAB_content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"5308491_0.013167704862612872\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"from datetime import datetime, timedelta\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport logging\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nlogging.basicConfig()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nlogger = logging.getLogger('TVO_INPUT')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nlogger.setLevel(logging.INFO)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport boto3\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport pandas as pd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport psycopg2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom io import BytesIO\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport base64\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_redshift_secret():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, REGION_NAME, SECRET_NAME\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # connects to AWS secrets manager to get credentials\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    session = boto3.session.Session()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    client = session.client(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        service_name='secretsmanager', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        get_secret_value_response = client.get_secret_value(SecretId=SECRET_NAME)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger.error(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR in getting redshift secrets\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if 'SecretString' in get_secret_value_response:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            secret = get_secret_value_response['SecretString']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            decoded_binary_secret = base64.b64decode(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                get_secret_value_response['SecretBinary'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return json.loads(secret)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_redshift_connection():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # creates data base connection and passes it back to caller\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        secrets = get_redshift_secret()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        conn = psycopg2.connect(dbname=secrets['DATABASE'],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                host=secrets['HOST'],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                port=secrets['PORT'],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                user=secrets['USER'],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                password=secrets['PASSWORD'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return conn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger.error(f'Error getting redshift connection details: Exception: {str(e)}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef run_redshift_query(redshift_query):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    conn = get_redshift_connection()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    df = pd.read_sql_query(redshift_query, con=conn)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return df\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef run_athena_query(query):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, ATHENA_DATABASE, ATHENA_TABLE, ATHENA_STATUS_OUTPUT_LOCATION, QUERY_BUCKET\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    ATHENA_CLIENT = boto3.client('athena', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    S3 = boto3.client('s3', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logger.info(f'Starting Athena query execution')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logger.info(f'Athena query:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{query}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    response = ATHENA_CLIENT.start_query_execution(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        QueryString=query,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        QueryExecutionContext={'Database': ATHENA_DATABASE},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ResultConfiguration={'OutputLocation': ATHENA_STATUS_OUTPUT_LOCATION},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        WorkGroup='juice_data'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Get the query execution ID\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    query_execution_id = response['QueryExecutionId']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Wait for the query to complete\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    while True:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        query_status = ATHENA_CLIENT.get_query_execution(QueryExecutionId=query_execution_id)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        status = query_status['QueryExecution']['Status']['State']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            break\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Retrieve and return the query results if the query succeeded\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if status == 'SUCCEEDED':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        s3_response_object = S3.get_object(Bucket=QUERY_BUCKET, Key=f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{ATHENA_STATUS_OUTPUT_LOCATION.split('/')[-2]}/{query_execution_id}.csv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        object_content = s3_response_object['Body'].read()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        results = pd.read_csv(BytesIO(object_content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger.info(f'Athena query ran successfully')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return results\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    elif status == 'FAILED':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise Exception('Query from Athena failed')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef client_modification(row):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if row.lower().strip() == 'bbb':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 'overstock'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    elif row.lower() == 'rexmd' or row.lower() == 'singlecare':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 'rxsense'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return row.lower()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef prepare_data(data, lookback_days, opt_penalty_station,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                   opt_penalty_daypart, opt_penalty_bucket, opt_penalty_variance, opt_max_seconds, branch):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global ATHENA_DATABASE, ATHENA_TABLE\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    input_df = pd.DataFrame(columns=['kpi_index', 'lookbefore_mins', 'lookafter_mins', 'include_freespots',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       'include_impressions', 'opt_penalty_station', 'opt_penalty_daypart',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       'branch', 'start_date', 'end_date', 'clientkey'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    redshift_query = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        select distinct c.clientkey_map, k.tvo_kpi_index, c.tvo_pre_window_minutes, c.tvo_post_window_minutes, c.tvo_include_freespots, c.tvo_include_impressions, c.dataset_start_date, c.dataset_end_date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        from portal_global_settings.client_mappings c, portal_global_settings.kpi_mappings k\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        where c.clientkey_map = k.clientkey_map\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        order by clientkey_map, tvo_kpi_index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    for end_date_string in data[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"end_dates\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Getting redshift results\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_date = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        end_dt = datetime(year=int(end_date_string.split(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")[0]), month=int(end_date_string.split(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")[1]), day=int(end_date_string.split(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")[2]), hour=0)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        prev_day = end_dt - timedelta(1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        end_date = f'{prev_day.year}-{str(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{:02d}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(prev_day.month))}-{str(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{:02d}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(prev_day.day))}'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        redshift_df = run_redshift_query(redshift_query)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        redshift_df = redshift_df.drop(columns=['dataset_start_date','dataset_end_date'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        redshift_df[['opt_penalty_station', 'opt_penalty_daypart', 'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds', 'branch', 'start_date', 'end_date']] = pd.DataFrame([[opt_penalty_station, opt_penalty_daypart, opt_penalty_bucket, opt_penalty_variance, opt_max_seconds, branch, start_date, end_date]], index=redshift_df.index)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        redshift_df = redshift_df.rename(columns = {'clientkey_map':'clientkey',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                                 'tvo_kpi_index':'kpi_index',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                                'tvo_pre_window_minutes':'lookbefore_mins',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                                'tvo_post_window_minutes':'lookafter_mins',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                                'tvo_include_freespots':'include_freespots',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                                'tvo_include_impressions':'include_impressions'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                                })\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Querying athena to get list of clients active in the past week\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        dt = (datetime.strptime(end_date_string, '%Y-%m-%d'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        end_check_date = dt.strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        dt_7 = dt - timedelta(days=lookback_days)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_check_date = dt_7.strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        athena_query = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        select advertiser, count(*) as row_count from \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        (select distinct * from {ATHENA_DATABASE}.{ATHENA_TABLE})\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        where cast(broadcast_date as date) between cast('{str(start_check_date)}' as date) and cast('{str(end_check_date)}' as date)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        group by advertiser\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        athena_df = run_athena_query(athena_query)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        active_client_list = athena_df[athena_df['row_count']>0]['advertiser'].to_list()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        active_client_list = [i.lower().strip() for i in active_client_list]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        active_list_df = pd.DataFrame({'client_orig':active_client_list})\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        active_list_df['client_mod'] = active_list_df['client_orig'].apply(client_modification)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Merging client list with configurations from redshift\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        final_df = redshift_df.set_index('clientkey').merge(active_list_df.set_index('client_mod'), left_on='clientkey', right_on='client_mod')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        final_df = final_df.rename(columns={'client_orig':'clientkey'})\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        final_df = final_df.dropna()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        input_df = pd.concat([input_df,final_df])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    input_df = input_df.sort_values(['end_date','clientkey','kpi_index'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return input_df\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef start_func(data, secret_name, region_name, athena_database, aws_access_key_id,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                aws_secret_access_key, athena_status_output_location, query_bucket,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                  athena_table, branch, lookback_days=7, opt_penalty_station=1,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                   opt_penalty_daypart=1, opt_penalty_bucket=1, opt_penalty_variance=1, opt_max_seconds=60):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n     \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, REGION_NAME, SECRET_NAME, conn, cursor, ATHENA_DATABASE, ATHENA_TABLE, ATHENA_STATUS_OUTPUT_LOCATION, QUERY_BUCKET\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    AWS_ACCESS_KEY_ID = aws_access_key_id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    AWS_SECRET_ACCESS_KEY = aws_secret_access_key\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    REGION_NAME = region_name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    SECRET_NAME = secret_name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    ATHENA_DATABASE = athena_database\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    ATHENA_TABLE = athena_table\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    ATHENA_STATUS_OUTPUT_LOCATION = athena_status_output_location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    QUERY_BUCKET = query_bucket\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    result_df = pd.DataFrame(columns=['kpi_index', 'lookbefore_mins', 'lookafter_mins', 'include_freespots',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       'include_impressions', 'opt_penalty_station', 'opt_penalty_daypart',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       'branch', 'start_date', 'end_date', 'clientkey'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    results = prepare_data(data[0], int(lookback_days), int(opt_penalty_station),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n               int(opt_penalty_daypart), int(opt_penalty_bucket), int(opt_penalty_variance), int(opt_max_seconds), branch)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return results\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"error\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true}]\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"pipeline_content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"from datetime import datetime, timedelta\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport logging\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nlogging.basicConfig()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nlogger = logging.getLogger('TVO_INPUT')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nlogger.setLevel(logging.INFO)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport boto3\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport pandas as pd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport psycopg2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom io import BytesIO\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport base64\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_redshift_secret():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, REGION_NAME, SECRET_NAME\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # connects to AWS secrets manager to get credentials\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    session = boto3.session.Session()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    client = session.client(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        service_name='secretsmanager', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        get_secret_value_response = client.get_secret_value(SecretId=SECRET_NAME)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger.error(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ERROR in getting redshift secrets\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if 'SecretString' in get_secret_value_response:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            secret = get_secret_value_response['SecretString']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            decoded_binary_secret = base64.b64decode(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                get_secret_value_response['SecretBinary'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return json.loads(secret)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_redshift_connection():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # creates data base connection and passes it back to caller\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        secrets = get_redshift_secret()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        conn = psycopg2.connect(dbname=secrets['DATABASE'],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                host=secrets['HOST'],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                port=secrets['PORT'],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                user=secrets['USER'],\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                password=secrets['PASSWORD'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return conn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger.error(f'Error getting redshift connection details: Exception: {str(e)}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef run_redshift_query(redshift_query):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    conn = get_redshift_connection()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    df = pd.read_sql_query(redshift_query, con=conn)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return df\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef run_athena_query(query):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, ATHENA_DATABASE, ATHENA_TABLE, ATHENA_STATUS_OUTPUT_LOCATION, QUERY_BUCKET\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    ATHENA_CLIENT = boto3.client('athena', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    S3 = boto3.client('s3', region_name=REGION_NAME, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logger.info(f'Starting Athena query execution')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logger.info(f'Athena query:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{query}')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    response = ATHENA_CLIENT.start_query_execution(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        QueryString=query,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        QueryExecutionContext={'Database': ATHENA_DATABASE},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ResultConfiguration={'OutputLocation': ATHENA_STATUS_OUTPUT_LOCATION},\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        WorkGroup='juice_data'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Get the query execution ID\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    query_execution_id = response['QueryExecutionId']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Wait for the query to complete\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    while True:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        query_status = ATHENA_CLIENT.get_query_execution(QueryExecutionId=query_execution_id)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        status = query_status['QueryExecution']['Status']['State']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            break\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Retrieve and return the query results if the query succeeded\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if status == 'SUCCEEDED':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        s3_response_object = S3.get_object(Bucket=QUERY_BUCKET, Key=f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{ATHENA_STATUS_OUTPUT_LOCATION.split('/')[-2]}/{query_execution_id}.csv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        object_content = s3_response_object['Body'].read()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        results = pd.read_csv(BytesIO(object_content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger.info(f'Athena query ran successfully')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return results\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    elif status == 'FAILED':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise Exception('Query from Athena failed')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef client_modification(row):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if row.lower().strip() == 'bbb':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 'overstock'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    elif row.lower() == 'rexmd' or row.lower() == 'singlecare':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 'rxsense'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return row.lower()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef prepare_data(data, lookback_days, opt_penalty_station,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                   opt_penalty_daypart, opt_penalty_bucket, opt_penalty_variance, opt_max_seconds, branch):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global ATHENA_DATABASE, ATHENA_TABLE\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    input_df = pd.DataFrame(columns=['kpi_index', 'lookbefore_mins', 'lookafter_mins', 'include_freespots',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       'include_impressions', 'opt_penalty_station', 'opt_penalty_daypart',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       'branch', 'start_date', 'end_date', 'clientkey'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    redshift_query = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        select distinct c.clientkey_map, k.tvo_kpi_index, c.tvo_pre_window_minutes, c.tvo_post_window_minutes, c.tvo_include_freespots, c.tvo_include_impressions, c.dataset_start_date, c.dataset_end_date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        from portal_global_settings.client_mappings c, portal_global_settings.kpi_mappings k\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        where c.clientkey_map = k.clientkey_map\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        order by clientkey_map, tvo_kpi_index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    for end_date_string in data[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"end_dates\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Getting redshift results\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_date = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        end_dt = datetime(year=int(end_date_string.split(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")[0]), month=int(end_date_string.split(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")[1]), day=int(end_date_string.split(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")[2]), hour=0)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        prev_day = end_dt - timedelta(1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        end_date = f'{prev_day.year}-{str(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{:02d}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(prev_day.month))}-{str(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{:02d}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".format(prev_day.day))}'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        redshift_df = run_redshift_query(redshift_query)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        redshift_df = redshift_df.drop(columns=['dataset_start_date','dataset_end_date'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        redshift_df[['opt_penalty_station', 'opt_penalty_daypart', 'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds', 'branch', 'start_date', 'end_date']] = pd.DataFrame([[opt_penalty_station, opt_penalty_daypart, opt_penalty_bucket, opt_penalty_variance, opt_max_seconds, branch, start_date, end_date]], index=redshift_df.index)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        redshift_df = redshift_df.rename(columns = {'clientkey_map':'clientkey',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                                 'tvo_kpi_index':'kpi_index',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                                'tvo_pre_window_minutes':'lookbefore_mins',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                                'tvo_post_window_minutes':'lookafter_mins',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                                'tvo_include_freespots':'include_freespots',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                                'tvo_include_impressions':'include_impressions'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                                                })\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Querying athena to get list of clients active in the past week\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        dt = (datetime.strptime(end_date_string, '%Y-%m-%d'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        end_check_date = dt.strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        dt_7 = dt - timedelta(days=lookback_days)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_check_date = dt_7.strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        athena_query = f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        select advertiser, count(*) as row_count from \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        (select distinct * from {ATHENA_DATABASE}.{ATHENA_TABLE})\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        where cast(broadcast_date as date) between cast('{str(start_check_date)}' as date) and cast('{str(end_check_date)}' as date)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        group by advertiser\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        athena_df = run_athena_query(athena_query)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        active_client_list = athena_df[athena_df['row_count']>0]['advertiser'].to_list()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        active_client_list = [i.lower().strip() for i in active_client_list]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        active_list_df = pd.DataFrame({'client_orig':active_client_list})\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        active_list_df['client_mod'] = active_list_df['client_orig'].apply(client_modification)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Merging client list with configurations from redshift\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        final_df = redshift_df.set_index('clientkey').merge(active_list_df.set_index('client_mod'), left_on='clientkey', right_on='client_mod')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        final_df = final_df.rename(columns={'client_orig':'clientkey'})\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        final_df = final_df.dropna()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        input_df = pd.concat([input_df,final_df])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    input_df = input_df.sort_values(['end_date','clientkey','kpi_index'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return input_df\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef start_func(data, secret_name, region_name, athena_database, aws_access_key_id,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                aws_secret_access_key, athena_status_output_location, query_bucket,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                  athena_table, branch, lookback_days=7, opt_penalty_station=1,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                   opt_penalty_daypart=1, opt_penalty_bucket=1, opt_penalty_variance=1, opt_max_seconds=60):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n     \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, REGION_NAME, SECRET_NAME, conn, cursor, ATHENA_DATABASE, ATHENA_TABLE, ATHENA_STATUS_OUTPUT_LOCATION, QUERY_BUCKET\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    AWS_ACCESS_KEY_ID = aws_access_key_id\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    AWS_SECRET_ACCESS_KEY = aws_secret_access_key\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    REGION_NAME = region_name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    SECRET_NAME = secret_name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    ATHENA_DATABASE = athena_database\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    ATHENA_TABLE = athena_table\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    ATHENA_STATUS_OUTPUT_LOCATION = athena_status_output_location\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    QUERY_BUCKET = query_bucket\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    result_df = pd.DataFrame(columns=['kpi_index', 'lookbefore_mins', 'lookafter_mins', 'include_freespots',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       'include_impressions', 'opt_penalty_station', 'opt_penalty_daypart',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       'opt_penalty_bucket', 'opt_penalty_variance', 'opt_max_seconds',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       'branch', 'start_date', 'end_date', 'clientkey'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    results = prepare_data(data[0], int(lookback_days), int(opt_penalty_station),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n               int(opt_penalty_daypart), int(opt_penalty_bucket), int(opt_penalty_variance), int(opt_max_seconds), branch)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return results\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"externalLibraries\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"psycopg2==2.9.3\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"boto3==1.21.5\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true},{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"psycopg2==2.9.3\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ischecked\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":true}]\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"type\\\\\\\":2,\\\\\\\"isScheduled\\\\\\\":null,\\\\\\\"isImported\\\\\\\":1,\\\\\\\"path\\\\\\\":null,\\\\\\\"uuid\\\\\\\":\\\\\\\"11111700493597054\\\\\\\"}\\\",\\\"preparation\\\":[]}}\"},\"sandboxService\":[],\"dataSource\":[],\"preparation\":[]}","logDestinationType":"","updatedBy":"User","isDatacatlog":false,"updatedOn":"2023-11-22T09:28:30.797Z[Etc/UTC]","spaceKey":"1111","createdFrom":1,"createdBy":"User","eDetails":[{"partitions":3,"isFailover":false,"isMapped":false,"displayName":"TVO2_backfill_event_1","deletedOn":"N/A","eventType":"kafkaEvent","isActive":true,"createdOn":"2023-11-20T09:48:10.22Z[Etc/UTC]","pipelineId":"dp_17004736553674710","actualPartitions":3,"maxOutput":1,"eventDuration":"","usedOutput":0,"isDeleted":false,"createdBy":"User","eventName":"TVO2_backfill_event_1_1700473690169_4980","isShared":false},{"partitions":3,"isFailover":false,"isMapped":false,"displayName":"TVO2_backfill_event_2","deletedOn":"N/A","eventType":"kafkaEvent","isActive":true,"createdOn":"2023-11-20T09:51:57.696Z[Etc/UTC]","pipelineId":"dp_17004736553674710","actualPartitions":3,"maxOutput":1,"eventDuration":"","usedOutput":0,"isDeleted":false,"createdBy":"User","eventName":"TVO2_backfill_event_2_1700473917659_1717","isShared":false},{"partitions":3,"isFailover":false,"isMapped":false,"displayName":"TVO2_backfill_event_3","deletedOn":"N/A","eventType":"kafkaEvent","isActive":true,"createdOn":"2023-11-20T09:53:39.769Z[Etc/UTC]","pipelineId":"dp_17004736553674710","actualPartitions":3,"maxOutput":1,"eventDuration":"","usedOutput":0,"isDeleted":false,"createdBy":"User","eventName":"TVO2_backfill_event_3_1700474019724_9806","isShared":false},{"partitions":3,"isFailover":false,"isMapped":false,"displayName":"TVO2_backfill_event_4","deletedOn":"N/A","eventType":"kafkaEvent","isActive":true,"createdOn":"2023-11-20T10:00:10.014Z[Etc/UTC]","pipelineId":"dp_17004736553674710","actualPartitions":3,"maxOutput":1,"eventDuration":"","usedOutput":0,"isDeleted":false,"createdBy":"User","eventName":"TVO2_backfill_event_4_1700474409971_6256","isShared":false},{"partitions":1,"isFailover":false,"isMapped":false,"displayName":"TVO2_backfill_event_5","deletedOn":"N/A","eventType":"kafkaEvent","isActive":true,"createdOn":"2023-11-22T09:27:45.922Z[Etc/UTC]","pipelineId":"dp_17004736553674710","actualPartitions":1,"maxOutput":1,"eventDuration":"","usedOutput":0,"isDeleted":false,"createdBy":"User","eventName":"TVO2_backfill_event_5_1700645265885_9735","isShared":false}],"metaDataVersion":"1.0","isScanned":0,"workFlowJson":{"ui.event":"[{\"displayName\":\"TVO2_backfill_event_1\",\"eventName\":\"TVO2_backfill_event_1_1700473690169_4980\",\"pipelineId\":\"dp_17004736553674710\",\"createdOn\":\"2023-11-20T09:48:10.22Z[Etc/UTC]\",\"createdBy\":\"User\",\"deletedOn\":\"N/A\",\"isActive\":true,\"isShared\":false,\"isFailover\":false,\"partitions\":3,\"maxOutput\":1,\"usedOutput\":0,\"eventDuration\":\"\",\"isMapped\":false,\"actualPartitions\":3,\"eventType\":\"kafkaEvent\",\"isDeleted\":false},{\"displayName\":\"TVO2_backfill_event_2\",\"eventName\":\"TVO2_backfill_event_2_1700473917659_1717\",\"pipelineId\":\"dp_17004736553674710\",\"createdOn\":\"2023-11-20T09:51:57.696Z[Etc/UTC]\",\"createdBy\":\"User\",\"deletedOn\":\"N/A\",\"isActive\":true,\"isShared\":false,\"isFailover\":false,\"partitions\":3,\"maxOutput\":1,\"usedOutput\":0,\"eventDuration\":\"\",\"isMapped\":false,\"actualPartitions\":3,\"eventType\":\"kafkaEvent\",\"isDeleted\":false},{\"displayName\":\"TVO2_backfill_event_3\",\"eventName\":\"TVO2_backfill_event_3_1700474019724_9806\",\"pipelineId\":\"dp_17004736553674710\",\"createdOn\":\"2023-11-20T09:53:39.769Z[Etc/UTC]\",\"createdBy\":\"User\",\"deletedOn\":\"N/A\",\"isActive\":true,\"isShared\":false,\"isFailover\":false,\"partitions\":3,\"maxOutput\":1,\"usedOutput\":0,\"eventDuration\":\"\",\"isMapped\":false,\"actualPartitions\":3,\"eventType\":\"kafkaEvent\",\"isDeleted\":false},{\"displayName\":\"TVO2_backfill_event_4\",\"eventName\":\"TVO2_backfill_event_4_1700474409971_6256\",\"pipelineId\":\"dp_17004736553674710\",\"createdOn\":\"2023-11-20T10:00:10.014Z[Etc/UTC]\",\"createdBy\":\"User\",\"deletedOn\":\"N/A\",\"isActive\":true,\"isShared\":false,\"isFailover\":false,\"partitions\":3,\"maxOutput\":1,\"usedOutput\":0,\"eventDuration\":\"\",\"isMapped\":false,\"actualPartitions\":3,\"eventType\":\"kafkaEvent\",\"isDeleted\":false},{\"displayName\":\"TVO2_backfill_event_5\",\"eventName\":\"TVO2_backfill_event_5_1700645265885_9735\",\"pipelineId\":\"dp_17004736553674710\",\"createdOn\":\"2023-11-22T09:27:45.922Z[Etc/UTC]\",\"createdBy\":\"User\",\"deletedOn\":\"N/A\",\"isActive\":true,\"isShared\":false,\"isFailover\":false,\"partitions\":1,\"maxOutput\":1,\"usedOutput\":0,\"eventDuration\":\"\",\"isMapped\":false,\"actualPartitions\":1,\"eventType\":\"kafkaEvent\",\"isDeleted\":false}]","ui.flowchart":"{\"operators\":{\"b9fc-ed9b-476a-afb4-a011\":{\"top\":40,\"left\":320,\"type\":{\"componentId\":\"comp_16188590124008978\",\"name\":\"API Ingestion\",\"deploymentType\":\"docker\",\"imageName\":\"580240783317.dkr.ecr.us-west-2.amazonaws.com/apidatareader\",\"version\":\"8.5.0\",\"isExposed\":false,\"componentType\":\"system\",\"componentGroup\":\"Consumers\",\"componentUIMetaData\":{\"invocationTypes\":[{\"label\":\"Real-Time\",\"key\":\"realtime\"}],\"connector\":{\"endpoint\":{\"in\":0,\"out\":1}},\"icon\":\"assets/images/component-icons/api_server_ingestion_2.svg\",\"properties\":[{\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-3\",\"options\":[{\"value\":\"Webhook\",\"key\":\"webhook\"},{\"value\":\"API Ingestion\",\"key\":\"apiIngestion\"}],\"label\":\"Ingestion Type\",\"key\":\"ingestionType\",\"order\":1,\"required\":true},{\"dynamicOption\":{\"request\":{\"path\":\"api/v1/apiingestion/getCredentials\",\"method\":\"get\",\"url\":\"\"},\"response\":{}},\"isDynamic\":true,\"controlType\":\"textbox\",\"cssClass\":\"col-sm-6\",\"readOnly\":true,\"label\":\"Ingestion Id\",\"value\":\"\",\"key\":\"ingestionId\",\"required\":true,\"order\":2},{\"controlType\":\"button\",\"hidden\":false,\"cssClass\":\"col-sm-1\",\"label\":\"Copy Ingestion Id\",\"key\":\"ingestionIdCopy\",\"order\":3},{\"controlType\":\"textbox\",\"cssClass\":\"col-sm-9\",\"readOnly\":true,\"label\":\"Ingestion Secret\",\"value\":\"\",\"key\":\"ingestionSecret\",\"required\":true,\"order\":4},{\"controlType\":\"button\",\"hidden\":false,\"cssClass\":\"col-sm-1\",\"label\":\"Copy Ingestion Secret\",\"key\":\"ingestionSecretCopy\",\"order\":5},{\"controlType\":\"textbox\",\"hidden\":true,\"cssClass\":\"col-sm-9\",\"readOnly\":true,\"label\":\"Component Instance Id URL\",\"value\":\"\",\"key\":\"componentInstanceIdURL\",\"order\":6},{\"controlType\":\"button\",\"hidden\":true,\"cssClass\":\"col-sm-1\",\"label\":\"Copy Link\",\"key\":\"copyLink\",\"isAPIServerIngestion\":true,\"order\":7}]},\"createdDate\":\"2021-04-19T19:03:32.4Z[Etc/UTC]\",\"updatedDate\":\"2021-05-28T13:01:33.779Z[Etc/UTC]\",\"createdBy\":\"User\",\"updatedBy\":\"user\",\"isActive\":true,\"isTestEnabled\":false,\"UiId\":\"b9fc-ed9b-476a-afb4-a011\",\"invocationMethodType\":\"realtime\",\"componentInstanceId\":\"comp1700473681691_inst_7360\",\"gUid\":\"1700473681691_1895\",\"action\":\"stop\",\"alertAction\":\"\"},\"properties\":{\"title\":\"API Ingestion\",\"inputs\":{},\"outputs\":{\"output_0\":{\"label\":\"O_1\"}}}},\"a812-240d-417c-801d-f28c\":{\"top\":140,\"left\":420,\"type\":{\"displayName\":\"TVO2_backfill_event_1\",\"eventName\":\"TVO2_backfill_event_1_1700473690169_4980\",\"pipelineId\":\"dp_17004736553674710\",\"createdOn\":\"2023-11-20T09:48:10.22Z[Etc/UTC]\",\"createdBy\":\"User\",\"deletedOn\":\"N/A\",\"isActive\":true,\"isShared\":false,\"isFailover\":false,\"partitions\":3,\"maxOutput\":1,\"usedOutput\":0,\"eventDuration\":\"\",\"isMapped\":false,\"actualPartitions\":3,\"eventType\":\"kafkaEvent\",\"isDeleted\":false,\"type\":\"Event\",\"componentUIMetaData\":{\"connector\":{\"endpoint\":{\"in\":1,\"out\":1}},\"operatorId\":\"a812-240d-417c-801d-f28c\"},\"UiId\":\"a812-240d-417c-801d-f28c\"},\"properties\":{\"title\":\"TVO2_backfill_event_1\",\"inputs\":{\"input_0\":{\"label\":\"I_1\"}},\"outputs\":{\"output_0\":{\"label\":\"O_1\"}}}},\"9087-5ed6-4c6f-8cea-316c\":{\"top\":140,\"left\":620,\"type\":{\"displayName\":\"TVO2_backfill_event_2\",\"eventName\":\"TVO2_backfill_event_2_1700473917659_1717\",\"pipelineId\":\"dp_17004736553674710\",\"createdOn\":\"2023-11-20T09:51:57.696Z[Etc/UTC]\",\"createdBy\":\"User\",\"deletedOn\":\"N/A\",\"isActive\":true,\"isShared\":false,\"isFailover\":false,\"partitions\":3,\"maxOutput\":1,\"usedOutput\":0,\"eventDuration\":\"\",\"isMapped\":false,\"eventType\":\"kafkaEvent\",\"isDeleted\":false,\"type\":\"Event\",\"componentUIMetaData\":{\"connector\":{\"endpoint\":{\"in\":1,\"out\":1}},\"operatorId\":\"9087-5ed6-4c6f-8cea-316c\"},\"UiId\":\"9087-5ed6-4c6f-8cea-316c\"},\"properties\":{\"title\":\"TVO2_backfill_event_2\",\"inputs\":{\"input_0\":{\"label\":\"I_1\"}},\"outputs\":{\"output_0\":{\"label\":\"O_1\"}}}},\"2d8f-21e7-4c78-8f76-c047\":{\"top\":40,\"left\":720,\"type\":{\"componentId\":\"comp_15464936690991417\",\"name\":\"load_balancer\",\"deploymentType\":\"docker\",\"imageName\":\"580240783317.dkr.ecr.us-west-2.amazonaws.com/custom_python_script\",\"version\":\"8.5.0\",\"isExposed\":false,\"componentType\":\"system\",\"componentGroup\":\"Scripting\",\"componentUIMetaData\":{\"invocationTypes\":[{\"label\":\"Real-Time\",\"key\":\"realtime\"},{\"label\":\"Batch\",\"key\":\"batch\"}],\"connector\":{\"endpoint\":{\"in\":1,\"out\":1}},\"icon\":\"assets/images/component-icons/custom_python_script.svg\",\"properties\":[{\"queryMode\":\"text/x-python\",\"indentUnit\":4,\"controlType\":\"queryeditor\",\"cssClass\":\"col-sm-12\",\"tooltip\":\"Enter the python script.\",\"label\":\"Script\",\"value\":\"\",\"required\":true,\"key\":\"script\",\"order\":5},{\"controlType\":\"textbox\",\"cssClass\":\"col-sm-3\",\"label\":\"Component Name\",\"value\":\"\",\"required\":true,\"key\":\"componentName\",\"order\":1},{\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-3\",\"options\":[],\"tooltip\":\"Select a start function name from the python script.\",\"label\":\"Start Function\",\"isPython\":true,\"required\":true,\"key\":\"startFunName\",\"order\":2},{\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-3\",\"options\":[{\"value\":\"Data Frame\",\"key\":\"DataFrame\"},{\"value\":\"List\",\"key\":\"List\"}],\"disabled\":false,\"label\":\"In Event DataType\",\"required\":false,\"key\":\"funInputType\",\"order\":3},{\"isMulti\":true,\"controlType\":\"iterable\",\"cssClass\":\"col-sm-9\",\"addButton\":{\"label\":\"Add New Column\"},\"label\":\"Input Data\",\"properties\":[[{\"cssClass\":\"col-sm-3\",\"controlType\":\"textbox\",\"Tooltip\":\"Enter parameter name provided in the function as key.\",\"label\":\"Key\",\"key\":\"key\",\"order\":1},{\"cssClass\":\"col-sm-3\",\"controlType\":\"textbox\",\"tooltip\":\"Enter value of the given parameter passed in the function.\",\"label\":\"Value\",\"key\":\"value\",\"order\":2}]],\"key\":\"keyValueInputs\",\"isIterable\":true,\"order\":6},{\"cssClass\":\"col-sm-6\",\"controlType\":\"textbox\",\"label\":\"External Libraries [*Library name seperated by comma (,)]\",\"key\":\"libraryList\",\"order\":4}]},\"createdDate\":\"2019-01-08T10:02:30.033Z[Etc/UTC]\",\"updatedDate\":\"2023-03-27T12:02:22.567Z[Etc/UTC]\",\"createdBy\":\"User\",\"updatedBy\":\"user\",\"isActive\":true,\"isTestEnabled\":true,\"availableComparisons\":{\"compareData\":\"Compare Data\",\"compareColumnCount\":\"Compare Number of columns\",\"compareRowCount\":\"Compare number of Rows\",\"compareSchema\":\"Check Data matches Schema\"},\"UiId\":\"2d8f-21e7-4c78-8f76-c047\",\"invocationMethodType\":\"batch\",\"componentInstanceId\":\"comp1700473989110_inst_8626\",\"gUid\":\"1700473989110_9251\",\"action\":\"stop\",\"alertAction\":\"\"},\"properties\":{\"title\":\"load_balancer\",\"inputs\":{\"input_0\":{\"label\":\"I_1\"}},\"outputs\":{\"output_0\":{\"label\":\"O_1\"}}}},\"c8db-fedb-4ae9-83d9-7501\":{\"top\":140,\"left\":800,\"type\":{\"displayName\":\"TVO2_backfill_event_3\",\"eventName\":\"TVO2_backfill_event_3_1700474019724_9806\",\"pipelineId\":\"dp_17004736553674710\",\"createdOn\":\"2023-11-20T09:53:39.769Z[Etc/UTC]\",\"createdBy\":\"User\",\"deletedOn\":\"N/A\",\"isActive\":true,\"isShared\":false,\"isFailover\":false,\"partitions\":3,\"maxOutput\":1,\"usedOutput\":0,\"eventDuration\":\"\",\"isMapped\":false,\"eventType\":\"kafkaEvent\",\"isDeleted\":false,\"type\":\"Event\",\"componentUIMetaData\":{\"connector\":{\"endpoint\":{\"in\":1,\"out\":1}},\"operatorId\":\"c8db-fedb-4ae9-83d9-7501\"},\"UiId\":\"c8db-fedb-4ae9-83d9-7501\"},\"properties\":{\"title\":\"TVO2_backfill_event_3\",\"inputs\":{\"input_0\":{\"label\":\"I_1\"}},\"outputs\":{\"output_0\":{\"label\":\"O_1\"}}}},\"0786-f76e-4c9e-a7b7-1db8\":{\"top\":40,\"left\":900,\"type\":{\"componentId\":\"comp_16449201586344539\",\"name\":\"tvo2_backfill\",\"deploymentType\":\"docker\",\"imageName\":\"580240783317.dkr.ecr.us-west-2.amazonaws.com/dslab_model_runner\",\"version\":\"w8.5.2\",\"isExposed\":false,\"componentType\":\"system\",\"componentGroup\":\"Machine Learning\",\"componentUIMetaData\":{\"invocationTypes\":[{\"label\":\"Real-Time\",\"key\":\"realtime\"},{\"label\":\"Batch\",\"key\":\"batch\"}],\"connector\":{\"endpoint\":{\"in\":1,\"out\":1}},\"icon\":\"assets/images/component-icons/bdb-notebook1.svg\",\"properties\":[{\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-3\",\"options\":[{\"isContainsNestedControl\":true,\"controlSet\":[{\"dynamicOption\":{\"request\":{\"path\":\"/cxf/bizviz/pluginService\",\"method\":\"post\"},\"response\":{}},\"isDynamic\":true,\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-6\",\"tooltip\":\"Select the project name created in DS Lab module.\",\"label\":\"Project Name\",\"key\":\"dsLabProjectId\",\"required\":true,\"order\":6},{\"dynamicOption\":{\"request\":{\"path\":\"/cxf/bizviz/pluginService\",\"method\":\"post\"},\"response\":{}},\"isDynamic\":true,\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-6\",\"tooltip\":\"Select the saved model name\",\"label\":\"Model Name\",\"key\":\"dsLabModelId\",\"required\":true,\"order\":8}],\"value\":\"Model Runner\",\"key\":\"dsLabModelRunner\"},{\"isContainsNestedControl\":true,\"controlSet\":[{\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-3\",\"options\":[{\"value\":\"Data Frame\",\"key\":\"dataFrame\"},{\"value\":\"List\",\"key\":\"List\"}],\"label\":\"Function Input Type\",\"key\":\"dsLabFunInputType\",\"required\":true,\"order\":2},{\"dynamicOption\":{\"request\":{\"path\":\"/cxf/bizviz/pluginService\",\"method\":\"post\"},\"response\":{}},\"isDynamic\":true,\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-6\",\"label\":\"Project Name\",\"key\":\"dsLabProjectId\",\"required\":true,\"order\":3,\"tooltip\":\"Select the project name created in DS Lab module.\"},{\"dynamicOption\":{\"request\":{\"path\":\"/cxf/bizviz/pluginService\",\"method\":\"post\",\"url\":\"\"},\"response\":{\"binding\":{}}},\"isDynamic\":true,\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-6\",\"tooltip\":\"Select the script name exported from the selected project.\",\"label\":\"Script Name\",\"key\":\"dsLabScriptId\",\"required\":true,\"order\":4},{\"controlType\":\"textbox\",\"cssClass\":\"col-sm-3\",\"readOnly\":false,\"label\":\"External Library\",\"key\":\"dsLabExternalLibrary\",\"order\":5,\"tooltip\":\"Comma saperated library names.\"},{\"dynamicOption\":{\"request\":{\"path\":\"/cxf/bizviz/pluginService\",\"method\":\"post\",\"url\":\"\"},\"response\":{\"binding\":{}}},\"isDynamic\":true,\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-3\",\"options\":[],\"tooltip\":\"Select the start function name from the script.\",\"label\":\"Start Function\",\"required\":true,\"key\":\"dsLabFunctionName\",\"order\":6},{\"controlType\":\"textareabox\",\"cssClass\":\"col-sm-12\",\"readOnly\":true,\"label\":\"Script\",\"rows\":8,\"value\":\"\",\"key\":\"dsLabScript\",\"required\":true,\"order\":7},{\"isMulti\":true,\"controlType\":\"iterable\",\"cssClass\":\"col-sm-12\",\"addButton\":{\"label\":\"Add New Column\"},\"label\":\"Input Data\",\"properties\":[[{\"cssClass\":\"col-sm-3\",\"controlType\":\"textbox\",\"label\":\"Key\",\"key\":\"key\",\"order\":1},{\"cssClass\":\"col-sm-3\",\"controlType\":\"textbox\",\"label\":\"Value\",\"key\":\"value\",\"order\":2}]],\"key\":\"dsLabInputData\",\"isIterable\":true,\"order\":8}],\"value\":\"Script Runner\",\"key\":\"dsLabScriptRunner\"}],\"isContainsNestedControl\":true,\"label\":\"Execution Type\",\"key\":\"dsLabExecutionType\",\"required\":true,\"order\":1}]},\"createdDate\":\"2022-02-15T10:15:58.635Z[Etc/UTC]\",\"updatedDate\":\"2023-03-24T11:40:28.292Z[Etc/UTC]\",\"createdBy\":\"User\",\"updatedBy\":\"user\",\"isActive\":true,\"isTestEnabled\":true,\"availableComparisons\":{\"compareData\":\"Compare Data\",\"compareColumnCount\":\"Compare Number of columns\",\"compareRowCount\":\"Compare number of Rows\",\"compareSchema\":\"Check Data matches Schema\"},\"UiId\":\"0786-f76e-4c9e-a7b7-1db8\",\"invocationMethodType\":\"realtime\",\"gUid\":\"1700474350629_4451\",\"action\":\"stop\",\"componentInstanceId\":\"comp1700477854606_inst_1830\",\"alertAction\":\"\"},\"properties\":{\"title\":\"tvo2_backfill\",\"inputs\":{\"input_0\":{\"label\":\"I_1\"}},\"outputs\":{\"output_0\":{\"label\":\"O_1\"}}}},\"73f8-cf2a-473a-bf30-0d0b\":{\"top\":40,\"left\":520,\"type\":{\"componentId\":\"comp_16449201586344539\",\"name\":\"tvo2_backfill_input\",\"deploymentType\":\"docker\",\"imageName\":\"580240783317.dkr.ecr.us-west-2.amazonaws.com/dslab_model_runner\",\"version\":\"w8.5.2\",\"isExposed\":false,\"componentType\":\"system\",\"componentGroup\":\"Machine Learning\",\"componentUIMetaData\":{\"invocationTypes\":[{\"label\":\"Real-Time\",\"key\":\"realtime\"},{\"label\":\"Batch\",\"key\":\"batch\"}],\"connector\":{\"endpoint\":{\"in\":1,\"out\":1}},\"icon\":\"assets/images/component-icons/bdb-notebook1.svg\",\"properties\":[{\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-3\",\"options\":[{\"isContainsNestedControl\":true,\"controlSet\":[{\"dynamicOption\":{\"request\":{\"path\":\"/cxf/bizviz/pluginService\",\"method\":\"post\"},\"response\":{}},\"isDynamic\":true,\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-6\",\"tooltip\":\"Select the project name created in DS Lab module.\",\"label\":\"Project Name\",\"key\":\"dsLabProjectId\",\"required\":true,\"order\":6},{\"dynamicOption\":{\"request\":{\"path\":\"/cxf/bizviz/pluginService\",\"method\":\"post\"},\"response\":{}},\"isDynamic\":true,\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-6\",\"tooltip\":\"Select the saved model name\",\"label\":\"Model Name\",\"key\":\"dsLabModelId\",\"required\":true,\"order\":8}],\"value\":\"Model Runner\",\"key\":\"dsLabModelRunner\"},{\"isContainsNestedControl\":true,\"controlSet\":[{\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-3\",\"options\":[{\"value\":\"Data Frame\",\"key\":\"dataFrame\"},{\"value\":\"List\",\"key\":\"List\"}],\"label\":\"Function Input Type\",\"key\":\"dsLabFunInputType\",\"required\":true,\"order\":2},{\"dynamicOption\":{\"request\":{\"path\":\"/cxf/bizviz/pluginService\",\"method\":\"post\"},\"response\":{}},\"isDynamic\":true,\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-6\",\"label\":\"Project Name\",\"key\":\"dsLabProjectId\",\"required\":true,\"order\":3,\"tooltip\":\"Select the project name created in DS Lab module.\"},{\"dynamicOption\":{\"request\":{\"path\":\"/cxf/bizviz/pluginService\",\"method\":\"post\",\"url\":\"\"},\"response\":{\"binding\":{}}},\"isDynamic\":true,\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-6\",\"tooltip\":\"Select the script name exported from the selected project.\",\"label\":\"Script Name\",\"key\":\"dsLabScriptId\",\"required\":true,\"order\":4},{\"controlType\":\"textbox\",\"cssClass\":\"col-sm-3\",\"readOnly\":false,\"label\":\"External Library\",\"key\":\"dsLabExternalLibrary\",\"order\":5,\"tooltip\":\"Comma saperated library names.\"},{\"dynamicOption\":{\"request\":{\"path\":\"/cxf/bizviz/pluginService\",\"method\":\"post\",\"url\":\"\"},\"response\":{\"binding\":{}}},\"isDynamic\":true,\"controlType\":\"dropdown\",\"cssClass\":\"col-sm-3\",\"options\":[],\"tooltip\":\"Select the start function name from the script.\",\"label\":\"Start Function\",\"required\":true,\"key\":\"dsLabFunctionName\",\"order\":6},{\"controlType\":\"textareabox\",\"cssClass\":\"col-sm-12\",\"readOnly\":true,\"label\":\"Script\",\"rows\":8,\"value\":\"\",\"key\":\"dsLabScript\",\"required\":true,\"order\":7},{\"isMulti\":true,\"controlType\":\"iterable\",\"cssClass\":\"col-sm-12\",\"addButton\":{\"label\":\"Add New Column\"},\"label\":\"Input Data\",\"properties\":[[{\"cssClass\":\"col-sm-3\",\"controlType\":\"textbox\",\"label\":\"Key\",\"key\":\"key\",\"order\":1},{\"cssClass\":\"col-sm-3\",\"controlType\":\"textbox\",\"label\":\"Value\",\"key\":\"value\",\"order\":2}]],\"key\":\"dsLabInputData\",\"isIterable\":true,\"order\":8}],\"value\":\"Script Runner\",\"key\":\"dsLabScriptRunner\"}],\"isContainsNestedControl\":true,\"label\":\"Execution Type\",\"key\":\"dsLabExecutionType\",\"required\":true,\"order\":1}]},\"createdDate\":\"2022-02-15T10:15:58.635Z[Etc/UTC]\",\"updatedDate\":\"2023-03-24T11:40:28.292Z[Etc/UTC]\",\"createdBy\":\"User\",\"updatedBy\":\"user\",\"isActive\":true,\"isTestEnabled\":true,\"availableComparisons\":{\"compareData\":\"Compare Data\",\"compareColumnCount\":\"Compare Number of columns\",\"compareRowCount\":\"Compare number of Rows\",\"compareSchema\":\"Check Data matches Schema\"},\"UiId\":\"73f8-cf2a-473a-bf30-0d0b\",\"invocationMethodType\":\"batch\",\"gUid\":\"1700473896753_3666\",\"action\":\"stop\",\"componentInstanceId\":\"comp1700477948777_inst_6559\",\"alertAction\":\"\"},\"properties\":{\"title\":\"tvo2_backfill_input\",\"inputs\":{\"input_0\":{\"label\":\"I_1\"}},\"outputs\":{\"output_0\":{\"label\":\"O_1\"}}}},\"8a1d-43cf-4d11-a85d-0f2b\":{\"top\":140,\"left\":1000,\"type\":{\"displayName\":\"TVO2_backfill_event_5\",\"eventName\":\"TVO2_backfill_event_5_1700645265885_9735\",\"pipelineId\":\"dp_17004736553674710\",\"createdOn\":\"2023-11-22T09:27:45.922Z[Etc/UTC]\",\"createdBy\":\"User\",\"deletedOn\":\"N/A\",\"isActive\":true,\"isShared\":false,\"isFailover\":false,\"partitions\":1,\"maxOutput\":1,\"usedOutput\":0,\"eventDuration\":\"\",\"isMapped\":false,\"eventType\":\"kafkaEvent\",\"isDeleted\":false,\"type\":\"Event\",\"componentUIMetaData\":{\"connector\":{\"endpoint\":{\"in\":1,\"out\":1}},\"operatorId\":\"8a1d-43cf-4d11-a85d-0f2b\"},\"UiId\":\"8a1d-43cf-4d11-a85d-0f2b\"},\"properties\":{\"title\":\"TVO2_backfill_event_5\",\"inputs\":{\"input_0\":{\"label\":\"I_1\"}},\"outputs\":{\"output_0\":{\"label\":\"O_1\"}}}}},\"links\":{\"0\":{\"fromOperator\":\"b9fc-ed9b-476a-afb4-a011\",\"fromConnector\":\"output_0\",\"fromSubConnector\":0,\"toOperator\":\"a812-240d-417c-801d-f28c\",\"toConnector\":\"input_0\",\"toSubConnector\":0},\"1\":{\"fromOperator\":\"0786-f76e-4c9e-a7b7-1db8\",\"fromConnector\":\"output_0\",\"fromSubConnector\":0,\"toOperator\":\"8a1d-43cf-4d11-a85d-0f2b\",\"toConnector\":\"input_0\",\"toSubConnector\":0},\"3\":{\"fromOperator\":\"9087-5ed6-4c6f-8cea-316c\",\"fromConnector\":\"output_0\",\"fromSubConnector\":0,\"toOperator\":\"2d8f-21e7-4c78-8f76-c047\",\"toConnector\":\"input_0\",\"toSubConnector\":0},\"4\":{\"fromOperator\":\"2d8f-21e7-4c78-8f76-c047\",\"fromConnector\":\"output_0\",\"fromSubConnector\":0,\"toOperator\":\"c8db-fedb-4ae9-83d9-7501\",\"toConnector\":\"input_0\",\"toSubConnector\":0},\"7\":{\"fromOperator\":\"c8db-fedb-4ae9-83d9-7501\",\"fromConnector\":\"output_0\",\"fromSubConnector\":0,\"toOperator\":\"0786-f76e-4c9e-a7b7-1db8\",\"toConnector\":\"input_0\",\"toSubConnector\":0},\"9\":{\"fromOperator\":\"a812-240d-417c-801d-f28c\",\"fromConnector\":\"output_0\",\"fromSubConnector\":0,\"toOperator\":\"73f8-cf2a-473a-bf30-0d0b\",\"toConnector\":\"input_0\",\"toSubConnector\":0},\"10\":{\"fromOperator\":\"73f8-cf2a-473a-bf30-0d0b\",\"fromConnector\":\"output_0\",\"fromSubConnector\":0,\"toOperator\":\"9087-5ed6-4c6f-8cea-316c\",\"toConnector\":\"input_0\",\"toSubConnector\":0}},\"operatorTypes\":{}}","currentPipeline":"{\"pipelineId\":\"dp_17004736553674710\",\"components\":[{\"UiId\":\"73f8-cf2a-473a-bf30-0d0b\",\"action\":\"stop\",\"invocationMethodType\":\"batch\",\"componentInstanceId\":\"comp1700477948777_inst_6559\",\"gUid\":\"1700473896753_3666\"},{\"UiId\":\"0786-f76e-4c9e-a7b7-1db8\",\"action\":\"stop\",\"invocationMethodType\":\"realtime\",\"componentInstanceId\":\"comp1700477854606_inst_1830\",\"gUid\":\"1700474350629_4451\"},{\"UiId\":\"2d8f-21e7-4c78-8f76-c047\",\"action\":\"stop\",\"invocationMethodType\":\"batch\",\"componentInstanceId\":\"comp1700473989110_inst_8626\",\"gUid\":\"1700473989110_9251\"},{\"UiId\":\"b9fc-ed9b-476a-afb4-a011\",\"action\":\"stop\",\"invocationMethodType\":\"realtime\",\"componentInstanceId\":\"comp1700473681691_inst_7360\",\"gUid\":\"1700473681691_1895\"}],\"pipelineDefinition\":{\"name\":\"TVO2_backfill\",\"desc\":\"\"},\"enableLogs\":false,\"logDestinationType\":\"\",\"logType\":\"\",\"resourceLimit\":\"low\"}","com.pipeline":""},"lastDeactivatedOn":"2023-11-20T11:27:52.035Z[Etc/UTC]"}
